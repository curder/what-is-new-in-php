import{_ as s,o as a,c as n,S as l}from"./chunks/framework.7a872c5a.js";const A=JSON.parse('{"title":"PHP 8.2","description":"","frontmatter":{"sidebarDepth":3,"sidebar":"auto"},"headers":[],"relativePath":"8.2/index.md","filePath":"8.2/index.md","lastUpdated":1692958950000}'),p={name:"8.2/index.md"},o=l(`<h1 id="php-8-2" tabindex="-1">PHP 8.2 <a class="header-anchor" href="#php-8-2" aria-label="Permalink to &quot;PHP 8.2&quot;">​</a></h1><p>PHP 8.2 发布于 2022-12-08，是 PHP 语言的重大更新。</p><p>它包含许多新功能，包括只读类、作为独立类型的 <code>null</code>、<code>false</code> 和 <code>true</code>、弃用的动态属性、性能改进等。</p><h2 id="新的只读类" tabindex="-1">新的只读类 <a class="header-anchor" href="#新的只读类" aria-label="Permalink to &quot;新的只读类&quot;">​</a></h2><p>PHP 8.1 引入了 <a href="https://www.php.net/manual/zh/language.oop5.properties.php#language.oop5.properties.readonly-properties" target="_blank" rel="noreferrer">readonly 类属性的特性</a>。</p><p>PHP 8.2 已添加对将<a href="https://www.php.net/manual/zh/language.oop5.basic.php#language.oop5.basic.class.readonly" target="_blank" rel="noreferrer">整个类声明为 readonly </a>。</p><p>如果需要将一个类声明为 <code>readonly</code>，它的所有属性将自动继承该 <code>readonly</code> 特性。</p><p>因此声明一个类 <code>readonly</code> 与将每个类属性声明为 <code>readonly</code> 相同，好处是当我们明确某个类的所有属性均为只读的话则可以将类定义为只读类。</p><p>这样做的好处是，每当我们添加新属性时，都不用在对应类的属性设置为只读。</p><p>例如，在 PHP 8.1 中，需要在所有类属性上添加 <code>readonly</code> 关键字：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Post</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DateTime</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">published_at</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>使用 PHP 8.2，可以这样写：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Post</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DateTime</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">published_at</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>还可以将抽象类或最终类声明为 <code>readonly</code>，并且 <code>readonly</code> 关键字的顺序无关紧要。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 定义抽象类</span></span>
<span class="line"><span style="color:#C792EA;">abstract</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Post</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 定义终极类</span></span>
<span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Post</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>PHP 允许声明一个 <code>readonly</code> 但没有属性的类，这可以防止动态属性，同时仍然允许子类 <code>readonly</code> 显式声明它们的属性。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1. 声明一个没有任何属性的只读类</span></span>
<span class="line"><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Team</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. 继承自只读类的子类可以重新定义只读属性</span></span>
<span class="line"><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Team</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__construct</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><code>readonly</code> 类只能包含类型化属性，这与声明单个只读属性的规则相同。</p><p>尝试声明一个 <code>readonly</code> 没有指定类型的属性的类将导致致命错误：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Type</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__construct</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// PHP Fatal error:  Readonly property Type::$age must have type in ... on line 5</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>此外，某些 PHP 功能声明不能使用 <code>readonly</code> 关键字修饰，它们分别是：</p><ul><li>枚举 <code>enum</code> （因为它不能包含任何属性）</li><li><code>Trait</code></li><li>接口 <code>Interface</code></li></ul><p>在 PHP 8.2 中尝试声明这些功能中的任何一个 <code>readonly</code> 都将导致解析错误。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#A6ACCD;">readonly </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Filesystem</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Parse error: syntax error, unexpected token &quot;interface&quot;, expecting &quot;abstract&quot; or &quot;final&quot; or &quot;readonly&quot; or &quot;class&quot;</span></span></code></pre></div><p>与所有 PHP 关键字一样，<code>readonly</code> 关键字不区分大小写。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">ReadOnly </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// readonly 关键字不区分大小写</span></span></code></pre></div><p>对 <code>readonly</code> 类动态添加属性会导致致命错误：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">person</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Curder</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Fatal error: Uncaught Error: Cannot create dynamic property Person::$name</span></span></code></pre></div><h2 id="析取范式-dnf-类型" tabindex="-1">析取范式 (DNF) 类型 <a class="header-anchor" href="#析取范式-dnf-类型" aria-label="Permalink to &quot;析取范式 (DNF) 类型&quot;">​</a></h2><p>PHP 8.2 支持不相交范式 (DNF) 类型——现在可以组合<a href="https://php.watch/versions/8.0/union-types" target="_blank" rel="noreferrer">联合类型 (PHP 8.0)</a> 和<a href="https://php.watch/versions/8.1/intersection-types" target="_blank" rel="noreferrer">交集类型 (PHP 8.1)</a>，从而可以声明精确且富有表现力的参数、返回和属性类型。</p><p>DNF类型允许我们结合<a href="https://www.php.net/manual/zh/language.types.type-system.php#language.types.type-system.composite.union" target="_blank" rel="noreferrer">并集</a> 和<a href="https://www.php.net/manual/zh/language.types.type-system.php#language.types.type-system.composite.intersection" target="_blank" rel="noreferrer">交集</a> 类型，遵循一个严格的规则：当结合并集和交集类型时，交集类型必须用括号分组。</p><p>比如如一下函数定义：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">generateSlug</span><span style="color:#89DDFF;">((</span><span style="color:#FFCB6B;">HasTitle</span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">HasId</span><span style="color:#89DDFF;">)|</span><span style="color:#F78C6C;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">post </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">strtolower</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">getTitle</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">getId</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="允许null、false和true作为独立类型" tabindex="-1">允许<code>null</code>、<code>false</code>和<code>true</code>作为独立类型 <a class="header-anchor" href="#允许null、false和true作为独立类型" aria-label="Permalink to &quot;允许\`null\`、\`false\`和\`true\`作为独立类型&quot;">​</a></h2><p>PHP 8.2 添加了三种新类型，它们分别是<code>null</code>、<code>false</code> 和 <code>true</code>。</p><p>常见的例子是 PHP 的内置函数，其中 <code>false</code> 用作发生错误时的返回类型。</p><p>例如在 <code>file_get_contents</code>：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">file_get_contents</span><span style="color:#89DDFF;">(</span><span style="color:#676E95;font-style:italic;">/* … */</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">string</span><span style="color:#89DDFF;">|false</span></span></code></pre></div><p>在 PHP 8.2 之前，已经可以将 <code>null</code> 跟其他类型作为联合使用；</p><p>但现在它也可以用作独立类型，例如：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">alwaysReturnNull</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>现在同样适用于 <code>true</code> 或者 <code>false</code>。</p><h2 id="新的随机扩展-randomizer" tabindex="-1">新的随机扩展 Randomizer <a class="header-anchor" href="#新的随机扩展-randomizer" aria-label="Permalink to &quot;新的随机扩展 Randomizer&quot;">​</a></h2><p>PHP 8.2 内置了一个随机类 <code>Randomizer</code>，它增加了一种更适合面向对象的方式来处理随机数生成和其他随机化操作。</p><p>可以使用此特性来打乱字符串或者打乱一个数组，在指定的数值范围获取随机数。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Random</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Randomizer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">randomizer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Randomizer</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 参数接收一个engine, 分别是 Mt19937，PcgOneseq128XslRr64，Xoshiro256StarStar 和 Secure</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">randomizer</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">shuffleBytes</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// eh wdolroll</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">var_dump</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">randomizer</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">shuffleArray</span><span style="color:#89DDFF;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">d</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [&quot;a&quot;, &quot;b&quot;, &quot;d&quot;, &quot;c&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">randomizer</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">getInt</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 73</span></span></code></pre></div><p><code>Randomizer</code> 类接受一个随机发生器引擎，可以根据需要更改该引擎。 例如区分生产环境和测试环境生成随机数：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">is_production </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">rng </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">is_production</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> Random</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Engine</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Secure</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> Random</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Engine</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Mt19937</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1234</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">randomizer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> Random</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Randomizer</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">rng</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">var_dump</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">get_class</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">randomizer</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">engine</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Random\\Engine\\Mt19937</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">randomizer</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">shuffleBytes</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// lhloe</span></span></code></pre></div><blockquote><p>当使用 <code>Mt19937</code> 引擎为种子设置值时，随机生成的值每次都是相同的。</p></blockquote><h2 id="在-const-表达式中获取枚举的属性" tabindex="-1">在 const 表达式中获取枚举的属性 <a class="header-anchor" href="#在-const-表达式中获取枚举的属性" aria-label="Permalink to &quot;在 const 表达式中获取枚举的属性&quot;">​</a></h2><p>此建议允许使用 <code>-&gt;</code> 或 <code>?-&gt;</code> 来获取常量表达式中枚举的属性。</p><p>此更改的主要动机是允许在不允许枚举对象的地方获取名称和值属性，例如数组键：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">string</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">case</span><span style="color:#A6ACCD;"> B </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">B</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> C </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#C792EA;">self</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">B</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">self</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">B</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="trait中的常量" tabindex="-1">Trait中的常量 <a class="header-anchor" href="#trait中的常量" aria-label="Permalink to &quot;Trait中的常量&quot;">​</a></h2><p>PHP 包含一种重用代码的方法，称为 <code>Trait</code>，它非常适合跨类的代码重用。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">trait</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Foo</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> CONSTANT </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bar</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">int</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">self</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">CONSTANT</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>我们无法通过 Trait 名称访问这个常量，无论是从 Trait 外部还是从 Trait 内部。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">trait</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Foo</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> CONSTANT </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bar</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">int</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Foo</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">CONSTANT</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Foo</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">CONSTANT</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>但是可以通过使用 Trait 的类来访问常量，前提是在 Trait 中定义的常量是公共的：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyClass</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Foo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyClass</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">CONSTANT</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="隐去回溯中的敏感参数" tabindex="-1">隐去回溯中的敏感参数 <a class="header-anchor" href="#隐去回溯中的敏感参数" aria-label="Permalink to &quot;隐去回溯中的敏感参数&quot;">​</a></h2><p>PHP允许您在出现问题时查看堆栈跟踪以及与每个堆栈帧关联的所有参数。这对调试非常有帮助。</p><p>但对敏感数据来说可能是灾难性的，这些堆栈跟踪可能包含敏感信息，例如环境变量、密码或用户名。</p><p>假设您的登录函数中存在密码，密码现在包含在由异常创建的堆栈跟踪中。</p><p>PHP 8.2 允许使用 <code>#[SensitiveParameter]</code> 属性标记此类“敏感参数”，这样就不必担心在出现问题时它们会被列在堆栈跟踪中。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">login</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">string</span><span style="color:#A6ACCD;">                       </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">    #[SensitiveParameter] </span><span style="color:#F78C6C;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">password</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Exception</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Whoops!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">login</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">curder</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">secret</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">PHP Fatal error:  Uncaught Exception: Whoops! in playground.php:8</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">Stack trace:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#0 playground.php(11): login(&#39;curder&#39;, Object(SensitiveParameterValue))</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#1 {main}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  thrown in playground.php on line 8</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span></code></pre></div><h2 id="datetime-类方法返回值类型更改" tabindex="-1">DateTime 类方法返回值类型更改 <a class="header-anchor" href="#datetime-类方法返回值类型更改" aria-label="Permalink to &quot;DateTime 类方法返回值类型更改&quot;">​</a></h2><p>在 PHP 8.2 中，这些方法返回值类型更改如下：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">DateTime</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">createFromImmutable</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span></span>
<span class="line"><span style="color:#FFCB6B;">DateTimeImmutable</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">createFromMutable</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span></span></code></pre></div><p>之前的返回值为 <code>DateTime</code> 和 <code>DateTimeImmutable</code>：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">DateTime</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">createFromImmutable</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> DateTime</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">DateTimeImmutable</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">createFromMutable</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> DateTimeImmutable</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="弃用-utf8-encode-和utf8-decode" tabindex="-1">弃用 utf8_encode()和utf8_decode() <a class="header-anchor" href="#弃用-utf8-encode-和utf8-decode" aria-label="Permalink to &quot;弃用 utf8_encode()和utf8_decode()&quot;">​</a></h2><p>PHP 8.2弃用了 <code>utf8_encode()</code> 和 <code>utf8_decode()</code> 函数。</p><p>如果调用它们，会看到这些弃用通知：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Deprecated</span><span style="color:#A6ACCD;">: </span><span style="color:#C792EA;">Function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">utf8_encode</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> is deprecated</span></span>
<span class="line"><span style="color:#FFCB6B;">Deprecated</span><span style="color:#A6ACCD;">: </span><span style="color:#C792EA;">Function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">utf8_decode</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> is deprecated</span></span></code></pre></div><p>建议改用 <code>mb_convert_encoding()</code>。</p><h2 id="弃用动态属性-添加新-allowdynamicproperties-属性" tabindex="-1">弃用动态属性（添加新#[AllowDynamicProperties] 属性） <a class="header-anchor" href="#弃用动态属性-添加新-allowdynamicproperties-属性" aria-label="Permalink to &quot;弃用动态属性（添加新#[AllowDynamicProperties] 属性）&quot;">​</a></h2><p>动态属性在 PHP 8.2 中被弃用。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Post</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Post</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">title </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// PHP Deprecated:  Creation of dynamic property Post::$title is deprecate</span></span></code></pre></div><p>当实现魔法 <code>__get()</code> 或 <code>__set()</code> 方法时，获取和设置对象的动态属性仍然有效。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Post</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">array</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">properties </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[];</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__set</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">mixed</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">void</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#A6ACCD;">properties</span><span style="color:#89DDFF;">[$</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Post</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">title </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>也可以通过将 <code>[#AllowDynamicProperties]</code> 属性添加到类定义前来启用动态属性的功能。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#A6ACCD;">#[AllowDynamicProperties] </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Post</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Post</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">title </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>最后，只读类永远不能有动态属性。将 <code>[#AllowDynamicProperties]</code> 属性添加到只读类将导致错误。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">#[AllowDynamicProperties] </span><span style="color:#676E95;font-style:italic;">// PHP Fatal error:  Cannot apply #[AllowDynamicProperties] to readonly class Post in ... on line 4</span></span>
<span class="line"><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Post</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="弃用字符串插值" tabindex="-1">弃用字符串插值 <a class="header-anchor" href="#弃用字符串插值" aria-label="Permalink to &quot;弃用字符串插值&quot;">​</a></h2><p>PHP 有几种在字符串中嵌入变量的方法。PHP 8.2 弃用了两种这样做的方式，因为它们很少使用，并且经常导致混淆：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> world </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">world </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">var_dump</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">var_dump</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello \${(world)}!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>下面的两种流行的字符串插值方式仍然有效：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">var_dump</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello </span><span style="color:#89DDFF;">{$</span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">var_dump</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">world</span><span style="color:#C3E88D;">!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h2 id="弃用部分支持的-callable" tabindex="-1">弃用部分支持的 Callable <a class="header-anchor" href="#弃用部分支持的-callable" aria-label="Permalink to &quot;弃用部分支持的 Callable&quot;">​</a></h2><p>PHP 8.2 弃用了一些可调用的语法，因为它们不一致。这些语法可以与 callable 类型、函数 <code>is_callable()</code> 和 <code>call_user_func()</code> 一起使用。</p><ul><li>不可用</li></ul><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">self::method</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">parent::method</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">static::method</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">self</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">method</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">parent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">method</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">static</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">method</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Bar::method</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Foo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Bar::method</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span></code></pre></div><ul><li>可用</li></ul><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">strlen</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">MyClass</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myMethod</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">MyClass::myMethod</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">Closure</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">fromCallable</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyClass</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myMethod</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#82AAFF;">strlen</span><span style="color:#89DDFF;">(...);</span></span>
<span class="line"><span style="color:#89DDFF;">[$this,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myMethod</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">];</span></span></code></pre></div><p>示例如下：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Foo</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__construct</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//        var_dump(is_callable([$this, &#39;bar&#39;]));</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//        var_dump(is_callable(&quot;self::bar&quot;));</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//        var_dump(is_callable(&#39;static::bar&#39;));</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//        var_dump(is_callable([&quot;self&quot;, &quot;bar&quot;]));</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//        var_dump(is_callable([&quot;static&quot;, &quot;bar&quot;]));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bar</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">void</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">myMethod</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">void</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">subFoo</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Foo</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__construct</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">parent</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">__construct</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//        var_dump(is_callable(&#39;parent::bar&#39;));</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//        var_dump(is_callable([&quot;parent&quot;, &quot;bar&quot;]));</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//        var_dump(is_callable([&#39;Foo&#39;, &quot;Foo::bar&quot;]));</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//        var_dump(is_callable([new Foo(), &quot;Foo::bar&quot;]));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 可用</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// var_dump(is_callable(&#39;strlen&#39;));</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// var_dump(is_callable([&#39;Foo&#39;, &#39;bar&#39;]));</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// var_dump(is_callable([Foo::class, &#39;bar&#39;]));</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// var_dump(is_callable(Closure::fromCallable(...)));</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// var_dump(is_callable([new Foo(), &#39;myMethod&#39;]));</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// var_dump(is_callable(strlen(...)));</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// new Foo(); // is_callable([$this, &#39;myMethod&#39;])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 不可用</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// new Foo(); // is_callable(&quot;self::bar&quot;)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// new Foo(); // is_callable(&#39;static::bar&#39;)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// new Foo(); // is_callable([&quot;self&quot;, &quot;bar&quot;])</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// new Foo(); // is_callable([&quot;static&quot;, &quot;bar&quot;])</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// new subFoo(); // is_callable(&#39;parent::bar&#39;)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// new subFoo(); // is_callable([&quot;parent&quot;, &quot;bar&quot;])</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// new subFoo(); // is_callable([&#39;Foo&#39;, &quot;Foo::bar&quot;])</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// new subFoo(); // is_callable([new Foo(), &quot;Foo::bar&quot;])</span></span></code></pre></div><h2 id="扩展阅读" tabindex="-1">扩展阅读 <a class="header-anchor" href="#扩展阅读" aria-label="Permalink to &quot;扩展阅读&quot;">​</a></h2><ul><li><a href="https://www.php.net/releases/8.2/zh.php" target="_blank" rel="noreferrer">PHP 8.2 - php.net</a></li><li><a href="https://kinsta.com/blog/php-8-2/" target="_blank" rel="noreferrer">What’s New in PHP 8.2 — New Features, Deprecations, Changes, and More</a></li><li><a href="https://php.watch/versions/8.2" target="_blank" rel="noreferrer">PHP 8.2: What&#39;s New and Changed</a></li><li><a href="https://stitcher.io/blog/new-in-php-82" target="_blank" rel="noreferrer">What&#39;s new in PHP 8.2</a></li><li><a href="https://www.myfreax.com/new-features-in-php-8-2-released/" target="_blank" rel="noreferrer">PHP 8.2已发布所有新特性概览</a></li></ul>`,100),e=[o];function t(c,r,y,D,F,C){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
