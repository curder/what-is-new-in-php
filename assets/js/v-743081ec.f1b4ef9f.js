"use strict";(self.webpackChunkwhat_is_new_in_php=self.webpackChunkwhat_is_new_in_php||[]).push([[307],{1164:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-743081ec",path:"/7.3/",title:"PHP 7.3",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto"},excerpt:"",headers:[{level:2,title:"灵活的 Heredoc 和 Nowdoc 语法",slug:"灵活的-heredoc-和-nowdoc-语法",children:[]},{level:2,title:"函数调用中允许尾部逗号",slug:"函数调用中允许尾部逗号",children:[]},{level:2,title:"JsonException异常",slug:"jsonexception异常",children:[]},{level:2,title:"升级 PCRE2",slug:"升级-pcre2",children:[]},{level:2,title:"list() 赋值引用",slug:"list-赋值引用",children:[]},{level:2,title:"is_countable 函数",slug:"is-countable-函数",children:[]},{level:2,title:"array_key_first(), array_key_last()",slug:"array-key-first-array-key-last",children:[]},{level:2,title:"Argon2 和 Hash 密码加密性能增强",slug:"argon2-和-hash-密码加密性能增强",children:[]},{level:2,title:"废弃并移除 image2wbmp()",slug:"废弃并移除-image2wbmp",children:[]},{level:2,title:"废弃并移除大小写不敏感的常量",slug:"废弃并移除大小写不敏感的常量",children:[]},{level:2,title:"同站点 Cookie",slug:"同站点-cookie",children:[]},{level:2,title:"FPM 更新",slug:"fpm-更新",children:[]},{level:2,title:"改进 Windows 下的文件删除",slug:"改进-windows-下的文件删除",children:[]},{level:2,title:"更友好的错误信息",slug:"更友好的错误信息",children:[]},{level:2,title:"Compact未定义变量",slug:"compact未定义变量",children:[]},{level:2,title:"字符串搜索函数",slug:"字符串搜索函数",children:[]}],filePathRelative:"7.3/README.md",git:{updatedTime:1640050744e3,contributors:[]}}},2425:(n,s,a)=>{a.r(s),a.d(s,{default:()=>v});var p=a(6252);const e=(0,p._)("h1",{id:"php-7-3",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#php-7-3","aria-hidden":"true"},"#"),(0,p.Uk)(" PHP 7.3")],-1),t=(0,p._)("h2",{id:"灵活的-heredoc-和-nowdoc-语法",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#灵活的-heredoc-和-nowdoc-语法","aria-hidden":"true"},"#"),(0,p.Uk)(" 灵活的 Heredoc 和 Nowdoc 语法")],-1),o={href:"https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("Heredoc"),l=(0,p.Uk)(" 和 "),r={href:"https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.nowdoc",target:"_blank",rel:"noopener noreferrer"},i=(0,p.Uk)("Nowdoc"),u=(0,p.Uk)(" 语法能够在使用多行长字符串时起到很大帮助。它要求结束标识符应当为出现在新行的首个字符串。"),k=(0,p.uE)('<div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// 除了这样：</span>\n\n<span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string heredoc-string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;</span>SQL</span>\n\nSELECT *\n\nFROM `table`\n\nWHERE `column` = true;\n\n<span class="token delimiter symbol">SQL<span class="token punctuation">;</span></span></span>\n\n<span class="token comment">// 这样也可以：</span>\n\n<span class="token variable">$query</span> <span class="token operator">=</span> <span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token constant">SQL</span>\n\n   <span class="token constant">SELECT</span> <span class="token operator">*</span>\n\n   <span class="token constant">FROM</span> <span class="token string backtick-quoted-string">`table`</span>\n\n   <span class="token constant">WHERE</span> <span class="token string backtick-quoted-string">`column`</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>\n\n   <span class="token constant">SQL</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>总的来说，此更新提出了两项改进，如下：</p><ul><li>闭合标识符前支持缩进</li><li>闭合标识符后不再强制换行</li></ul><p>在上面的例子里，可以很容易地看出这些改动。</p><h2 id="函数调用中允许尾部逗号" tabindex="-1"><a class="header-anchor" href="#函数调用中允许尾部逗号" aria-hidden="true">#</a> 函数调用中允许尾部逗号</h2><p>在参数、元素、变量列表结尾，追加尾部逗号。有时我们在数组内以及函数调用（尤其是可变参函数）时需要传递大量元素，若是漏掉一个逗号，便会报错。</p><p>鉴于如上情况，尾部逗号便显得十分有用。这个特性已经允许在数组内使用，并且从 PHP 7.2 开始，分组命名空间（Grouped Namespaces）语法也开始支持尾部逗号。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> Foo\\Bar\\<span class="token punctuation">{</span>\n   Foo<span class="token punctuation">,</span>\n   Bar<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token variable">$foo</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n   <span class="token string single-quoted-string">&#39;foo&#39;</span><span class="token punctuation">,</span>\n   <span class="token string single-quoted-string">&#39;bar&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>当新值需要被追加在此处时，尾部逗号便显得十分实用。在可变参函数例如 <code>unset()</code> 内，更是如此。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">unset</span><span class="token punctuation">(</span>\n    <span class="token variable">$foo</span><span class="token punctuation">,</span>\n    <span class="token variable">$bar</span><span class="token punctuation">,</span>\n    <span class="token variable">$baz</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>同时，使用 <code>compact()</code> 函数给模版引擎传递一批变量时，也是个能用到的例子。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">view</span><span class="token punctuation">(</span>\n    <span class="token string single-quoted-string">&#39;index&#39;</span><span class="token punctuation">,</span>\n    <span class="token function">compact</span><span class="token punctuation">(</span>\n        <span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span>\n        <span class="token string single-quoted-string">&#39;body&#39;</span><span class="token punctuation">,</span>\n        <span class="token string single-quoted-string">&#39;comments&#39;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在某些需要构造连续或分组数据情况下，经常要使用 <code>array_merge()</code> 函数合并数组。也可以利用尾部逗号：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$newArray</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span>\n    <span class="token variable">$arrayOne</span><span class="token punctuation">,</span>\n    <span class="token variable">$arrayTwo</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;bar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>同样，也可以在调用任意方法、函数以及闭包时使用此特性。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">Foo</span>\n<span class="token punctuation">{</span>\n <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token comment">//</span>\n <span class="token punctuation">}</span>\n\n <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">bar</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token comment">//</span>\n <span class="token punctuation">}</span>\n\n <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token comment">//</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token variable">$foo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span>\n <span class="token string single-quoted-string">&#39;constructor&#39;</span><span class="token punctuation">,</span>\n <span class="token string single-quoted-string">&#39;bar&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token variable">$foo</span><span class="token operator">-&gt;</span><span class="token function">bar</span><span class="token punctuation">(</span>\n <span class="token string single-quoted-string">&#39;method&#39;</span><span class="token punctuation">,</span>\n <span class="token string single-quoted-string">&#39;bar&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token variable">$foo</span><span class="token punctuation">(</span>\n <span class="token string single-quoted-string">&#39;invoke&#39;</span><span class="token punctuation">,</span>\n <span class="token string single-quoted-string">&#39;bar&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="jsonexception异常" tabindex="-1"><a class="header-anchor" href="#jsonexception异常" aria-hidden="true">#</a> JsonException异常</h2><p>解析 JSON 响应数据，有 <code>json_encode()</code> 以及 <code>json_decode()</code> 两个函数可供使用。 不幸的是，它们都没有恰当的错误抛出表现。</p><p><code>json_encode</code> 失败时仅会返回 <code>false</code>；<code>json_decode</code> 失败时则会返回 <code>null</code>，而 <code>null</code> 可作为合法的 JSON 数值。</p><p>唯一获取错误的方法是，调用 <code>json_last_error()</code> 或 <code>json_last_error_msg()</code>，它们将分别返回机器可读和人类可读的全局错误状态。</p><p>该 RFC 提出的解决方案是为 JSON 函数新增 <code>JSON_THROW_ON_ERROR</code> 常量用于忽略全局错误状态。</p><p>当错误发生时，JSON 函数将会抛出 <code>JsonException</code> 异常，异常消息（message）为 <code>json_last_error()</code> 的返回值，异常代码（code）为 <code>json_last_error_msg()</code> 的返回值。</p><p>如下是调用例子：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token constant">JSON_THROW_ON_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;invalid json&quot;</span><span class="token punctuation">,</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token constant">JSON_THROW_ON_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 抛出 JsonException 异常</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="升级-pcre2" tabindex="-1"><a class="header-anchor" href="#升级-pcre2" aria-hidden="true">#</a> 升级 PCRE2</h2><p>PHP 使用 PCRE 作为正则表达式引擎。 但从 PHP 7.3 开始，PCRE2 将作为新的正则引擎大显身手。</p><p>所以，需要将现有的正则表达式迁移到符合 PCRE2 的规则。这些规则比以前更具侵入性。请看以下实例：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/[\\w-.]+/&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这个表达式在新版 PHP 内将会匹配失败且不会触发警告。因为 PCRE2 现严格要求，若需匹配连字符（<code>-</code>）而非用于表示范围，则必须移动到末尾或将其转义。</p><p>更新到 PCRE2 10.x 后，支持了以下以及更多特性：</p><ul><li>相对后向引用 <code>\\g{+2}</code>（等效于已存在的 <code>\\g{-2}</code>）</li><li>PCRE2 版本检查 <code>(?(VERSION&gt;=x)...)</code></li><li><code>(*NOTEMPTY)</code> 和 <code>(*NOTEMPTY_ATSTART)</code> 告知引擎勿返回空匹配</li><li><code>(*NO_JIT)</code> 禁用 <code>JIT</code> 优化</li><li><code>(*LIMIT_HEAP=d)</code> 限制堆大小为 <code>d</code> KB</li><li><code>(*LIMIT_DEPTH=d)</code> 设置回溯深度限制为 <code>d</code></li><li><code>(*LIMIT_MATCH=d)</code> 设置匹配数量限制为 <code>d</code></li></ul><h2 id="list-赋值引用" tabindex="-1"><a class="header-anchor" href="#list-赋值引用" aria-hidden="true">#</a> list() 赋值引用</h2><p>PHP 中的 <code>list()</code> 现在可以赋值给引用，在 PHP 7.3 之前的版本中 <code>list()</code> 中赋值不能使用引用，在 PHP 7.3 中将允许使用引用，新改进的语法如下：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$array</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>相当于</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在 PHP 7.3 的变更中，我们还可以与 <code>foreach()</code> 方法一起嵌套使用</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$array</span> <span class="token keyword">as</span> <span class="token keyword">list</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="is-countable-函数" tabindex="-1"><a class="header-anchor" href="#is-countable-函数" aria-hidden="true">#</a> is_countable 函数</h2><p>在 PHP 7.2 中，用 <code>count()</code> 获取对象和数组的数量。如果对象不可数，PHP 会抛出警告⚠️ 。</p><p>所以需要检查对象或者数组是否可数。</p><p>PHP 7.3 提供新的函数 <code>is_countable()</code> 来解决这个问题。</p><p>该 RFC 提供新的函数 <code>is_countable()</code>，对数组类型或者实现了 Countable 接口的实例的变量返回 <code>true</code> 。</p><p>之前:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$foo</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token variable">$foo</span> <span class="token keyword">instanceof</span> <span class="token class-name">Countable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// $foo 是可数的                                               </span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>之后:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_countable</span><span class="token punctuation">(</span><span class="token variable">$foo</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// $foo 是可数的</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="array-key-first-array-key-last" tabindex="-1"><a class="header-anchor" href="#array-key-first-array-key-last" aria-hidden="true">#</a> array_key_first(), array_key_last()</h2><p>PHP 7.3 之前版本的 PHP 允许使用 <code>reset()</code> ，<code>end()</code> 和 <code>key()</code> 等方法，通过改变数组的内部指针来获取数组首尾的键和值。</p><p>现在，为了避免这种内部干扰，PHP 7.3 推出了新的函数来解决这个问题：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">array_key_first</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取数组第一个元素的键名</span>\n<span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">array_key_last</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取数组最后一个元素的键名</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// 关联数组的用法</span>\n<span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;a&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;b&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;c&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token variable">$firstKey</span> <span class="token operator">=</span> <span class="token function">array_key_first</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$lastKey</span> <span class="token operator">=</span> <span class="token function">array_key_last</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assert</span><span class="token punctuation">(</span><span class="token variable">$firstKey</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assert</span><span class="token punctuation">(</span><span class="token variable">$lastKey</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 索引数组的用法</span>\n<span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token variable">$firstKey</span> <span class="token operator">=</span> <span class="token function">array_key_first</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$lastKey</span> <span class="token operator">=</span> <span class="token function">array_key_last</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assert</span><span class="token punctuation">(</span><span class="token variable">$firstKey</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assert</span><span class="token punctuation">(</span><span class="token variable">$lastKey</span> <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="argon2-和-hash-密码加密性能增强" tabindex="-1"><a class="header-anchor" href="#argon2-和-hash-密码加密性能增强" aria-hidden="true">#</a> Argon2 和 Hash 密码加密性能增强</h2><p>在 PHP 的早期版本中，我们增加了 Argon2 和哈希密码加密算法，这是一种使用哈希加密算法来保护密码的现代算法。</p><p>它有三种不同的类型，<code>Argon2i</code>，<code>Argon2d</code> 和 <code>Argon 2id</code>。</p><p>我们针对 <code>Argon2i</code> 密码散列和基于密码的密钥生成进行了优化。</p><p><code>Argon2d</code> 性能更快，并使用依赖于内存的数据访问。 Argon2i 使用与内存无关的数据访问。 <code>Argon2id</code> 是 <code>Argon2i</code> 和 <code>Argon2d</code> 的混合体，使用依赖于数据和与数据独立的存储器访问的组合。</p><p>password_hash()：</p><p>Argon2id现在是在 <code>paswword_ *</code> 函数中使用的推荐的 Argon2 变量。</p><p>具有自定义成员方法的名称的Argon2id与PASSWORD_ARGON2I的使用方法相同</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code>password_hash（<span class="token string single-quoted-string">&#39;password&#39;</span>，<span class="token constant">PASSWORD_ARGON2ID</span>，<span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;memory_cost&#39;</span><span class="token operator">=&gt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">17</span>，<span class="token string single-quoted-string">&#39;time_cost&#39;</span><span class="token operator">=&gt;</span> <span class="token number">4</span>，<span class="token string single-quoted-string">&#39;threads&#39;</span><span class="token operator">=&gt;</span> <span class="token number">2</span><span class="token punctuation">]</span>）<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>password_verify();</code></p><p>除了 Argon2i 之外，<code>password_verify();</code> 函数也适用于Argon2id。</p><p><code>password_needs_rehash();</code></p><p>此函数也将接受Argon2id哈希值，如果任何变量成员发生变化，则返回 <code>true</code>。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token function">password_hash</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;password&#39;</span><span class="token punctuation">,</span> <span class="token constant">PASSWORD_ARGON2ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">password_needs_rehash</span><span class="token punctuation">(</span><span class="token variable">$hash</span><span class="token punctuation">,</span> <span class="token constant">PASSWORD_ARGON2ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 false</span>\n<span class="token function">password_needs_rehash</span><span class="token punctuation">(</span><span class="token variable">$hash</span><span class="token punctuation">,</span> <span class="token constant">PASSWORD_ARGON2ID</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;memory_cost&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="废弃并移除-image2wbmp" tabindex="-1"><a class="header-anchor" href="#废弃并移除-image2wbmp" aria-hidden="true">#</a> 废弃并移除 image2wbmp()</h2><p>该函数能够将图像输出为 WBMP 格式。另一个名为 imagewbmp() 的函数也同样具备单色转换的作用。</p><p>因此，出于重复原因，image2wbmp() 现已被废弃，你可使用 imagewbmp() 代替它。此函数被弃用后，再次调用它将会触发已弃用警告。</p><p>待后续此函数被移除后，再次调用它将会触发致命错误。</p><h2 id="废弃并移除大小写不敏感的常量" tabindex="-1"><a class="header-anchor" href="#废弃并移除大小写不敏感的常量" aria-hidden="true">#</a> 废弃并移除大小写不敏感的常量</h2><p>使用先前版本的 PHP，可以同时使用大小写敏感和大小写不敏感的常量。但大小写不敏感的常量会在使用中造成一点麻烦。</p><p>所以，为了解决这个问题，PHP 7.3 废弃了大小写不敏感的常量。</p><p>原先的情况是：</p><ul><li>类常量始终为「大小写敏感」。</li><li>使用 <code>const</code> 关键字定义的全局常量始终为「大小写敏感」。注意此处仅仅是常量自身的名称，不包含命名空间名的部分，PHP 的命名空间始终为「大小写不敏感」。</li><li>使用 <code>define()</code> 函数定义的常量默认为「大小写敏感」。</li><li>使用 <code>define()</code> 函数并将第三个参数设为 <code>true</code> 定义的常量为「大小写不敏感」。</li></ul><p>如今 PHP 7.3 提议废弃并移除以下用法：</p><ul><li>在 PHP 7.3: 废弃使用 <code>true</code> 作为 <code>define()</code> 的第三个参数。</li><li>在 PHP 7.3: 废弃使用与定义时的大小写不一致的名称，访问大小写不敏感的常量。<code>true</code>、<code>false</code> 以及 <code>null</code> 除外。</li></ul><h2 id="同站点-cookie" tabindex="-1"><a class="header-anchor" href="#同站点-cookie" aria-hidden="true">#</a> 同站点 Cookie</h2><p>PHP 7.3 在建议在使用 cookies 时，增加同站点标志。这个 RFC 会影响4个系统函数。</p><ul><li><strong>setcookie</strong></li><li><strong>setrawcookie</strong></li><li><strong>session_set_cookie_params</strong></li><li><strong>session_get_cookie_params</strong></li></ul><p>这个影响会在两种情况下起作用。</p><p>其中一种方式会添加函数的新参数 ，另一种方式允许以数组形式的选项代替其他单独选项。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword type-declaration">bool</span> <span class="token function">setcookie</span><span class="token punctuation">(</span>\n\n   <span class="token keyword type-hint">string</span> <span class="token variable">$name</span>\n\n   <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;&quot;</span>\n\n   <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$expire</span> <span class="token operator">=</span> <span class="token number">0</span>\n\n   <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;&quot;</span>\n\n   <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$domain</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;&quot;</span>\n\n   <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword type-hint">bool</span> <span class="token variable">$secure</span> <span class="token operator">=</span> <span class="token constant boolean">false</span>\n\n   <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword type-hint">bool</span> <span class="token variable">$httponly</span> <span class="token operator">=</span> <span class="token constant boolean">false</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n\n<span class="token punctuation">)</span>\n\n<span class="token keyword type-declaration">bool</span> <span class="token function">setcookie</span> <span class="token punctuation">(</span>\n\n   <span class="token keyword type-hint">string</span> <span class="token variable">$name</span>\n\n   <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;&quot;</span>\n\n   <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$expire</span> <span class="token operator">=</span> <span class="token number">0</span>\n\n   <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$options</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n\n<span class="token punctuation">)</span>\n\n<span class="token comment">// 两种方式均可.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="fpm-更新" tabindex="-1"><a class="header-anchor" href="#fpm-更新" aria-hidden="true">#</a> FPM 更新</h2><p>FastCGI 进程管理器也进行了更新，现在提供了新的方式来记录 FPM 日志。</p><ul><li><p><strong>log_limit</strong>: 设置允许的日志长度，可以超过 1024 字符。</p></li><li><p><strong>log_buffering</strong>: 允许不需要额外缓冲去操作日志。</p></li><li><p><strong>decorate_workers_output</strong>: 当启用了 <strong>catch_workers_output</strong> 时，系统会去禁用渲染输出。</p></li></ul><h2 id="改进-windows-下的文件删除" tabindex="-1"><a class="header-anchor" href="#改进-windows-下的文件删除" aria-hidden="true">#</a> 改进 Windows 下的文件删除</h2>',87),d=(0,p.Uk)("如"),b={href:"https://www.php.net/manual/zh/migration73.windows-support.php#migration73.windows-support.core.file-descriptors",target:"_blank",rel:"noopener noreferrer"},m=(0,p.Uk)("官方文档"),g=(0,p.Uk)("所述："),h=(0,p.uE)('<p>默认情况下，文件描述符以共享读、写、删除的方式去操作。</p><p>这很有效的去映射 POSIX 并允许去删除正在使用中的文件。但这并不是100%都是一样的，不同的平台可能仍存在一些差异。</p><p>删除操作之后，文件目录仍存在直到所有的文件操作被关闭。</p><h2 id="更友好的错误信息" tabindex="-1"><a class="header-anchor" href="#更友好的错误信息" aria-hidden="true">#</a> 更友好的错误信息</h2><p><code>TypeErrors</code> 用于整数和布尔值，用于打印其全名， 它已更改为 <code>int</code> 和 <code>bool</code>，以匹配代码中的类型提示。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Argument 1 passed to foo() must be of the type int/bool\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>与PHP 7.2相比:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Argument 1 passed to foo() must be of the type\ninteger/boolean\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="compact未定义变量" tabindex="-1"><a class="header-anchor" href="#compact未定义变量" aria-hidden="true">#</a> Compact未定义变量</h2><p>传递给 <code>compact</code> 函数的未定义变量将被通知，而在此版本之前会被忽略。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;foo&#39;</span><span class="token punctuation">;</span>\n<span class="token function">compact</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Notice: compact(): Undefined variable: b</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="字符串搜索函数" tabindex="-1"><a class="header-anchor" href="#字符串搜索函数" aria-hidden="true">#</a> 字符串搜索函数</h2><p>不能再将非字符串针传递给字符串搜索函数。 这些是受影响的函数:</p><ul><li><code>strpos()</code></li><li><code>strrpos()</code></li><li><code>stripos()</code></li><li><code>strripos()</code></li><li><code>strstr()</code></li><li><code>strchr()</code></li><li><code>strrchr()</code></li><li><code>stristr()</code></li></ul>',14),v={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,t,(0,p._)("p",null,[(0,p._)("a",o,[c,(0,p.Wm)(a)]),l,(0,p._)("a",r,[i,(0,p.Wm)(a)]),u]),k,(0,p._)("p",null,[d,(0,p._)("a",b,[m,(0,p.Wm)(a)]),g]),h],64)}}}}]);