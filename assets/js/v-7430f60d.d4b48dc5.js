"use strict";(self.webpackChunkwhat_is_new_in_php=self.webpackChunkwhat_is_new_in_php||[]).push([[205],{8603:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-7430f60d",path:"/8.1/",title:"PHP 8.1",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto"},excerpt:"",headers:[{level:2,title:"枚举",slug:"枚举",children:[{level:3,title:"基本用法",slug:"基本用法",children:[]},{level:3,title:"高级用法",slug:"高级用法",children:[]}]}],filePathRelative:"8.1/README.md",git:{updatedTime:1640051888e3,contributors:[]}}},5114:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var e=a(6252);const p=(0,e._)("h1",{id:"php-8-1",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#php-8-1","aria-hidden":"true"},"#"),(0,e.Uk)(" PHP 8.1")],-1),t={id:"枚举",tabindex:"-1"},o=(0,e._)("a",{class:"header-anchor",href:"#枚举","aria-hidden":"true"},"#",-1),c=(0,e.Uk)(),l={href:"https://www.php.net/releases/8.1/zh.php#enumerations",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("枚举"),u=(0,e.uE)('<p>在 PHP 中， 枚举是一种特殊类型的对象。Enum 本身是一个类（Class）， 它的各种条目（case）是这个类的单例对象，意味着也是个有效对象 —— 包括类型的检测，能用对象的地方，也可以用它。</p><p>最常见的枚举例子是内置的 boolean 类型， 该枚举类型有两个有效值 true 和 false。 Enum 使开发者能够任意定义出用户自己的、足够健壮的枚举。</p><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h3><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">enum</span> <span class="token class-name-definition class-name">SortOrder</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token constant">ASC</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token constant">DESC</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function-definition function">query</span><span class="token punctuation">(</span><span class="token variable">$fields</span><span class="token punctuation">,</span> <span class="token variable">$filter</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">SortOrder</span> <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token class-name static-context">SortOrder</span><span class="token operator">::</span><span class="token constant">ASC</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token comment">//</span>\n<span class="token punctuation">}</span>\n<span class="token delimiter important">?&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>由于确保 <code>$order</code> 不是 <code>SortOrder::ASC</code> 就是 <code>SortOrder::DESC</code>，所以 <code>query()</code> 函数能安全处理。 因为其他任意值都会导致 <code>TypeError</code>， 所以不需要额外的错误检查。</p></blockquote><h3 id="高级用法" tabindex="-1"><a class="header-anchor" href="#高级用法" aria-hidden="true">#</a> 高级用法</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&lt;</span>?php\nenum UserStatus: string\n<span class="token punctuation">{</span>\n    <span class="token keyword">case</span> Pending <span class="token operator">=</span> <span class="token string">&#39;P&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> Active <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> Suspended <span class="token operator">=</span> <span class="token string">&#39;S&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> CanceledByUser <span class="token operator">=</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">;</span>\n\n    public <span class="token keyword">function</span> label<span class="token punctuation">(</span><span class="token punctuation">)</span>: string\n    <span class="token punctuation">{</span>\n        <span class="token builtin class-name">return</span> match<span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            self::Pending <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&#39;Pending&#39;</span>,\n            self::Active <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&#39;Active&#39;</span>,\n            self::Suspended <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&#39;Suspended&#39;</span>,\n            self::CanceledByUser <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&#39;Canceled by user&#39;</span>,\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nUserStatus::Pending-<span class="token operator">&gt;</span>name     // 获取枚举名\nUserStatus::Pending-<span class="token operator">&gt;</span>value    // 获取枚举值, 比如例子中的字符串\nUserStatus::cases<span class="token punctuation">(</span><span class="token punctuation">)</span>           // 获取枚举列表\nUserStatus::Pending-<span class="token operator">&gt;</span>label<span class="token punctuation">(</span><span class="token punctuation">)</span>  // 调用枚举方法获取对应返回值\n\n// 渲染下拉选项结构\nforeach <span class="token punctuation">(</span>UserStatus::cases<span class="token punctuation">(</span><span class="token punctuation">)</span> as <span class="token variable">$case</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    printf<span class="token punctuation">(</span><span class="token string">&#39;&lt;option value=&quot;%s&quot;&gt;%s&lt;/option&gt;\\n&#39;</span>, <span class="token variable">$case</span>-<span class="token operator">&gt;</span>value, <span class="token variable">$case</span>-<span class="token operator">&gt;</span>label<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n// UserStatus::Pending <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">&#39;P&#39;</span><span class="token punctuation">;</span> // 错误的写法,不应该用枚举值跟标量值进行比对\n// UserStatus::Pending <span class="token operator">==</span><span class="token operator">=</span> UserStatus::from<span class="token punctuation">(</span><span class="token string">&#39;P&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 可以通过 from 静态方法获取枚举实例\n// UserStatus::Pending <span class="token operator">==</span><span class="token operator">=</span> UserStatus::tryFrom<span class="token punctuation">(</span><span class="token string">&#39;P&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 或者通过 tryFrom 静态方法获取枚举实例，当值不存在时会返回NULL\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><blockquote><p>用户的状态是 <code>UserStatus::Pending</code>、 <code>UserStatus::Active</code>、 <code>UserStatus::Suspended</code>、 <code>UserStatus::CanceledByUser</code> 中的一个，具有独占性。 函数可以根据 <code>UserStatus</code> 设置参数类型，仅支持这四种值。</p><p>所有四个值都有一个 <code>label()</code> 方法，返回了人类可读的字符串。</p><p>它独立于等同于标量的“机器名”。 机器名用于类似数据库字段或 <code>HTML</code> 选择框这样的地方。</p></blockquote>',8),i={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("h2",t,[o,c,(0,e._)("a",l,[r,(0,e.Wm)(a)])]),u],64)}}}}]);