"use strict";(self.webpackChunkwhat_is_new_in_php=self.webpackChunkwhat_is_new_in_php||[]).push([[660],{7041:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-7430f5ee",path:"/8.0/",title:"PHP 8.0",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto"},excerpt:"",headers:[{level:2,title:"Nullsafe 运算符",slug:"nullsafe-运算符",children:[]},{level:2,title:"Match 表达式",slug:"match-表达式",children:[]},{level:2,title:"构造器属性提升",slug:"构造器属性提升",children:[]},{level:2,title:"允许对象的 ::class",slug:"允许对象的-class",children:[]},{level:2,title:"命名参数",slug:"命名参数",children:[]},{level:2,title:"新的内建函数",slug:"新的内建函数",children:[{level:3,title:"字符串 str_starts_with()、 str_ends_with()、str_contains() 函数",slug:"字符串-str-starts-with-、-str-ends-with-、str-contains-函数",children:[]},{level:3,title:"get_debug_type 函数",slug:"get-debug-type-函数",children:[]}]},{level:2,title:"Weak Map 类",slug:"weak-map-类",children:[]},{level:2,title:"联合类型",slug:"联合类型",children:[]},{level:2,title:"Attributes 注解",slug:"attributes-注解",children:[]},{level:2,title:"throw 作为表达式",slug:"throw-作为表达式",children:[]}],filePathRelative:"8.0/README.md",git:{updatedTime:1640051888e3,contributors:[]}}},4337:(n,s,a)=>{a.r(s),a.d(s,{default:()=>Wn});var p=a(6252);const e=(0,p._)("h1",{id:"php-8-0",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#php-8-0","aria-hidden":"true"},"#"),(0,p.Uk)(" PHP 8.0")],-1),t={id:"nullsafe-运算符",tabindex:"-1"},o=(0,p._)("a",{class:"header-anchor",href:"#nullsafe-运算符","aria-hidden":"true"},"#",-1),l=(0,p.Uk)(),c={href:"https://www.php.net/releases/8.0/zh.php#nullsafe-operator",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("Nullsafe 运算符"),i=(0,p.uE)('<p>现在可以用新的 nullsafe 运算符链式调用，而不需要条件检查 null。 如果链条中的一个元素失败了，整个链条会中止并认定为 Null。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token constant">null</span><span class="token punctuation">;</span> <span class="token comment">// return new Profile;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">Profile</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">employment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;web development&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 之前的写法，先判断是否存在，再进行调用</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$profile</span> <span class="token operator">=</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$profile</span><span class="token operator">-&gt;</span><span class="token function">employment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 8.0 允许通过 nullsafe 进行链式调用</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?-&gt;</span><span class="token function">employment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string single-quoted-string">&#39;Not Provider&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>',2),u={id:"match-表达式",tabindex:"-1"},k=(0,p._)("a",{class:"header-anchor",href:"#match-表达式","aria-hidden":"true"},"#",-1),b=(0,p.Uk)(),m={href:"https://www.php.net/releases/8.0/zh.php#match-expression",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("Match 表达式"),h=(0,p.uE)('<p>新的 <code>match</code> 类似于 <code>switch</code>，并具有以下功能：</p><ul><li>Match 是一个表达式，它可以储存到变量中亦可以直接返回。</li><li>Match 分支仅支持单行，它不需要一个 <code>break;</code> 语句。</li><li>Match 使用严格比较。</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">Conversation</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">//</span>\n<span class="token punctuation">}</span>\n\n<span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conversation</span><span class="token punctuation">;</span>\n\n<span class="token comment">//switch (get_class($object)) {</span>\n<span class="token comment">//    case &#39;Conversation&#39;:</span>\n<span class="token comment">//        $type = &#39;started_conversation&#39;;</span>\n<span class="token comment">//        break;</span>\n<span class="token comment">//</span>\n<span class="token comment">//    case &#39;Reply&#39;:</span>\n<span class="token comment">//        $type = &#39;replied_to_conversation&#39;;</span>\n<span class="token comment">//        break;</span>\n<span class="token comment">//</span>\n<span class="token comment">//    case &#39;Comment&#39;:</span>\n<span class="token comment">//        $type = &#39;commented_to_conversation&#39;;</span>\n<span class="token comment">//        break;</span>\n<span class="token comment">//}</span>\n\n<span class="token comment">// 使用match表达式简化写法</span>\n<span class="token variable">$type</span> <span class="token operator">=</span> <span class="token keyword">match</span> <span class="token punctuation">(</span><span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token string single-quoted-string">&#39;Conversation&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;stated_conversation&#39;</span><span class="token punctuation">,</span>\n    <span class="token string single-quoted-string">&#39;Reply&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;replied_to_conversation&#39;</span><span class="token punctuation">,</span>\n    <span class="token string single-quoted-string">&#39;Comment&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;commented_to_conversation&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">echo</span> <span class="token variable">$type</span><span class="token punctuation">;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div>',3),g={id:"构造器属性提升",tabindex:"-1"},v=(0,p._)("a",{class:"header-anchor",href:"#构造器属性提升","aria-hidden":"true"},"#",-1),w=(0,p.Uk)(),f={href:"https://www.php.net/releases/8.0/zh.php#constructor-property-promotion",target:"_blank",rel:"noopener noreferrer"},y=(0,p.Uk)("构造器属性提升"),_=(0,p.uE)('<p>在 PHP 8.0 中我们可以通过编写更少的代码来定义并初始化类属性。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$name</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">Plan</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;monthly&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">Signup</span>\n<span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * <span class="token keyword">@param</span>  <span class="token class-name">User</span>  <span class="token parameter">$user</span>\n     * <span class="token keyword">@param</span>  <span class="token class-name">Plan</span>  <span class="token parameter">$plan</span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span>\n        <span class="token keyword">protected</span> <span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">,</span>\n        <span class="token keyword">protected</span> <span class="token class-name type-declaration">Plan</span> <span class="token variable">$plan</span>\n    <span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token variable">$user</span>   <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;jone_doe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$plan</span>   <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Plan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$signup</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Signup</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$plan</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$signup</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><blockquote><p>在类的构造函数中可以初始化类属性类型，属性的可访问性，以及赋默认值。</p></blockquote>',3),$={id:"允许对象的-class",tabindex:"-1"},q=(0,p._)("a",{class:"header-anchor",href:"#允许对象的-class","aria-hidden":"true"},"#",-1),U=(0,p.Uk)(),x={href:"https://wiki.php.net/rfc/class_name_literal_on_object",target:"_blank",rel:"noopener noreferrer"},E=(0,p.Uk)("允许对象的 "),C=(0,p._)("code",null,"::class",-1),M=(0,p.uE)('<div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">Conversation</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">//</span>\n<span class="token punctuation">}</span>\n\n<span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conversation</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Conversation&quot; &quot;Conversation&quot;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>在语法上类似于类常量访问，更加直观地期望语法 <code>$object::class</code> 也能正常工作并提供与 <code>get_class($object)</code> 相同的结果。</p></blockquote>',2),P={id:"命名参数",tabindex:"-1"},W=(0,p._)("a",{class:"header-anchor",href:"#命名参数","aria-hidden":"true"},"#",-1),A=(0,p.Uk)(),j={href:"https://www.php.net/releases/8.0/zh.php#named-arguments",target:"_blank",rel:"noopener noreferrer"},I=(0,p.Uk)("命名参数"),z=(0,p.uE)('<p>这个新的 PHP 8 特性允许您根据参数名称传递函数参数，而不是它们的顺序。</p><ul><li>仅仅指定必填参数，跳过可选参数。</li><li>参数的顺序无关、自己就是文档（self-documented）</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">Invoice</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span>\n        <span class="token keyword">private</span> <span class="token variable">$description</span><span class="token punctuation">,</span>\n        <span class="token keyword">private</span> <span class="token variable">$total</span><span class="token punctuation">,</span>\n        <span class="token keyword">private</span> <span class="token variable">$date</span><span class="token punctuation">,</span>\n        <span class="token keyword">private</span> <span class="token variable">$paid</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">//</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token variable">$invoice</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Invoice</span><span class="token punctuation">(</span>\n    <span class="token argument-name">description</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;Customer installation&#39;</span><span class="token punctuation">,</span>\n    <span class="token argument-name">total</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>\n    <span class="token argument-name">date</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">,</span>\n    <span class="token argument-name">paid</span><span class="token punctuation">:</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$invoice</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><blockquote><p>命名参数有一个问题是当我们修改了函数命名的时候，则在调用函数的时候的命名参数也需要一同作修改，否则会抛出：<code>Uncaught Error: Unknown named parameter</code> 的错误</p></blockquote><h2 id="新的内建函数" tabindex="-1"><a class="header-anchor" href="#新的内建函数" aria-hidden="true">#</a> 新的内建函数</h2>',5),D={id:"字符串-str-starts-with-、-str-ends-with-、str-contains-函数",tabindex:"-1"},H=(0,p._)("a",{class:"header-anchor",href:"#字符串-str-starts-with-、-str-ends-with-、str-contains-函数","aria-hidden":"true"},"#",-1),N=(0,p.Uk)(" 字符串 "),R={href:"https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions",target:"_blank",rel:"noopener noreferrer"},S=(0,p.Uk)("str_starts_with()"),F=(0,p.Uk)("、 "),T={href:"https://wiki.php.net/rfc/str_contains",target:"_blank",rel:"noopener noreferrer"},V=(0,p.Uk)("str_ends_with()"),Y=(0,p.Uk)("、"),L={href:"https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions",target:"_blank",rel:"noopener noreferrer"},O=(0,p.Uk)("str_contains()"),B=(0,p.Uk)(" 函数"),G=(0,p.uE)('<div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment"># str_starts_with</span>\n\n<span class="token variable">$id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;inv_asdasdasdasdasdasd&#39;</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">str_starts_with</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;inv_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment"># str_ends_with</span>\n<span class="token variable">$id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;asdasdasdasdasdasd_payment&#39;</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">str_ends_with</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;_payment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment"># str_contains</span>\n<span class="token variable">$url</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;https://example.com?foo=bar&#39;</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">str_contains</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',1),J={id:"get-debug-type-函数",tabindex:"-1"},K=(0,p._)("a",{class:"header-anchor",href:"#get-debug-type-函数","aria-hidden":"true"},"#",-1),Q=(0,p.Uk)(),X={href:"https://wiki.php.net/rfc/get_debug_type",target:"_blank",rel:"noopener noreferrer"},Z=(0,p.Uk)("get_debug_type 函数"),nn=(0,p.uE)('<p><code>get_debug_type</code> 函数返回给定变量的数据类型。 下面是跟 <code>gettype</code> 函数返回的数据类型对比：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// 字符串</span>\n<span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;I am a string&#39;</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">get_debug_type</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string(6) &quot;string&quot; 、string(6) &quot;string&quot;</span>\n\n<span class="token comment">// 整型</span>\n<span class="token variable">$int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">get_debug_type</span><span class="token punctuation">(</span><span class="token variable">$int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string(3) &quot;int&quot; 、string(7) &quot;integer&quot;</span>\n\n<span class="token comment">// 浮点型</span>\n<span class="token variable">$float</span> <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">get_debug_type</span><span class="token punctuation">(</span><span class="token variable">$float</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string(5) &quot;float&quot; 、string(6) &quot;double&quot;</span>\n\n<span class="token comment">// 数组</span>\n<span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">get_debug_type</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string(5) &quot;array&quot; 、string(5) &quot;array&quot;</span>\n\n<span class="token comment">// 对象</span>\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">get_debug_type</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string(4) &quot;User&quot; 、string(6) &quot;object&quot;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>',2),sn={id:"weak-map-类",tabindex:"-1"},an=(0,p._)("a",{class:"header-anchor",href:"#weak-map-类","aria-hidden":"true"},"#",-1),pn=(0,p.Uk)(),en={href:"https://wiki.php.net/rfc/weak_maps",target:"_blank",rel:"noopener noreferrer"},tn=(0,p.Uk)("Weak Map 类"),on=(0,p.uE)('<div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">interface</span> <span class="token class-name-definition class-name">Event</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">SomeEvent</span> <span class="token keyword">implements</span> <span class="token class-name">Event</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">AnotherEvent</span> <span class="token keyword">implements</span> <span class="token class-name">Event</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">Dispatcher</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">protected</span> <span class="token class-name type-declaration">WeakMap</span> <span class="token variable">$dispatchCount</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">dispatchCount</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">dispatch</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Event</span> <span class="token variable">$event</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">dispatchCount</span><span class="token punctuation">[</span><span class="token variable">$event</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">dispatchCount</span><span class="token punctuation">[</span><span class="token variable">$event</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">dispatchCount</span><span class="token punctuation">[</span><span class="token variable">$event</span><span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token variable">$dispatcher</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dispatcher</span><span class="token punctuation">;</span>\n\n<span class="token variable">$event</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeEvent</span><span class="token punctuation">;</span>\n\n<span class="token variable">$dispatcher</span><span class="token operator">-&gt;</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$dispatcher</span><span class="token operator">-&gt;</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token variable">$anotherEvent</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnotherEvent</span><span class="token punctuation">;</span>\n<span class="token variable">$dispatcher</span><span class="token operator">-&gt;</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token variable">$anotherEvent</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$dispatcher</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div>',1),ln={id:"联合类型",tabindex:"-1"},cn=(0,p._)("a",{class:"header-anchor",href:"#联合类型","aria-hidden":"true"},"#",-1),rn=(0,p.Uk)(),un={href:"https://www.php.net/releases/8.0/zh.php#union-types",target:"_blank",rel:"noopener noreferrer"},kn=(0,p.Uk)("联合类型"),bn=(0,p.uE)('<p>相较于以前的 PHPDoc 声明类型的组合，现在可以用原生支持的联合类型声明取而代之，并在运行时得到校验。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">protected</span> <span class="token class-name">User</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$user</span><span class="token punctuation">;</span> <span class="token comment">// 可以在定义类属性时定义对应属性类型为联合类型</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">makeFriendsWith</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token comment">// 联合类型声明,在php8之前不允许这样定义参数类型</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">user</span> <span class="token operator">=</span> <span class="token variable">$user</span><span class="token punctuation">;</span>\n        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Yay friends&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getFriends</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token operator">?</span><span class="token class-name return-type">User</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">user</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token variable">$joe</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span>\n<span class="token variable">$sam</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span>\n\n<span class="token variable">$joe</span><span class="token operator">-&gt;</span><span class="token function">makeFriendsWith</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>',2),mn={id:"attributes-注解",tabindex:"-1"},dn=(0,p._)("a",{class:"header-anchor",href:"#attributes-注解","aria-hidden":"true"},"#",-1),hn=(0,p.Uk)(),gn={href:"https://www.php.net/manual/zh/language.attributes.overview.php",target:"_blank",rel:"noopener noreferrer"},vn=(0,p.Uk)("Attributes 注解"),wn=(0,p._)("p",null,"注解功能提供了代码中的声明部分都可以添加结构化、机器可读的元数据的能力， 注解的目标可以是类、方法、函数、参数、属性、类常量。",-1),fn=(0,p.Uk)("通过 "),yn={href:"https://www.php.net/manual/zh/book.reflection.php",target:"_blank",rel:"noopener noreferrer"},_n=(0,p.Uk)("反射 API"),$n=(0,p.Uk)(" 可在运行时获取注解所定义的元数据。"),qn=(0,p.uE)('<p>因此注解可以成为直接嵌入代码的配置式语言。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Attribute</span></span><span class="token delimiter punctuation">]</span></span>\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">ApplyMiddleware</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$middleware</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">//</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">middleware</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">ApplyMiddleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;class&#39;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span>\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyController</span>\n<span class="token punctuation">{</span>\n    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">ApplyMiddleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;property&#39;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span>\n    <span class="token keyword">protected</span> <span class="token variable">$myProperty</span><span class="token punctuation">;</span>\n\n\n    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">ApplyMiddleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;method&#39;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token variable">$controller</span>      <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyController</span><span class="token punctuation">;</span>\n<span class="token variable">$reflectionClass</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionClass</span><span class="token punctuation">(</span><span class="token variable">$controller</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 类</span>\n<span class="token variable">$attributes</span>      <span class="token operator">=</span> <span class="token variable">$reflectionClass</span><span class="token operator">-&gt;</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token class-name static-context">ApplyMiddleware</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$middleware</span>      <span class="token operator">=</span> <span class="token variable">$attributes</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token operator">?-&gt;</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$middleware</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string(5) &quot;class&quot;</span>\n\n<span class="token comment">// 方法</span>\n<span class="token variable">$attributes</span>      <span class="token operator">=</span> <span class="token variable">$reflectionClass</span><span class="token operator">-&gt;</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;index&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$middleware</span> <span class="token operator">=</span> <span class="token variable">$attributes</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?-&gt;</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$middleware</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string(6) &quot;method&quot;</span>\n\n<span class="token comment">// 属性</span>\n<span class="token variable">$attributes</span> <span class="token operator">=</span> <span class="token variable">$reflectionClass</span><span class="token operator">-&gt;</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;myProperty&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$middleware</span> <span class="token operator">=</span> <span class="token variable">$attributes</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?-&gt;</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$middleware</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string(8) &quot;property&quot;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div>',2),Un={id:"throw-作为表达式",tabindex:"-1"},xn=(0,p._)("a",{class:"header-anchor",href:"#throw-作为表达式","aria-hidden":"true"},"#",-1),En=(0,p.Uk)(),Cn={href:"https://wiki.php.net/rfc/throw_expression",target:"_blank",rel:"noopener noreferrer"},Mn=(0,p.Uk)("throw 作为表达式"),Pn=(0,p.uE)('<p>允许在接受表达式的任何上下文中使用 <code>throw</code> 关键字。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// callable</span>\n<span class="token variable">$callable</span> <span class="token operator">=</span> <span class="token keyword">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// $value 的值仅不为null</span>\n<span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$nullableVariable</span> <span class="token operator">??</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// $value 的值仅为true</span>\n<span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$falsableValue</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 跟使用if表达式一样，让代码变得简洁</span>\n<span class="token variable">$condition</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$condition</span> <span class="token operator">||</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$condition</span> <span class="token keyword">and</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$condition</span> <span class="token keyword">or</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',2),Wn={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("h2",t,[o,l,(0,p._)("a",c,[r,(0,p.Wm)(a)])]),i,(0,p._)("h2",u,[k,b,(0,p._)("a",m,[d,(0,p.Wm)(a)])]),h,(0,p._)("h2",g,[v,w,(0,p._)("a",f,[y,(0,p.Wm)(a)])]),_,(0,p._)("h2",$,[q,U,(0,p._)("a",x,[E,C,(0,p.Wm)(a)])]),M,(0,p._)("h2",P,[W,A,(0,p._)("a",j,[I,(0,p.Wm)(a)])]),z,(0,p._)("h3",D,[H,N,(0,p._)("a",R,[S,(0,p.Wm)(a)]),F,(0,p._)("a",T,[V,(0,p.Wm)(a)]),Y,(0,p._)("a",L,[O,(0,p.Wm)(a)]),B]),G,(0,p._)("h3",J,[K,Q,(0,p._)("a",X,[Z,(0,p.Wm)(a)])]),nn,(0,p._)("h2",sn,[an,pn,(0,p._)("a",en,[tn,(0,p.Wm)(a)])]),on,(0,p._)("h2",ln,[cn,rn,(0,p._)("a",un,[kn,(0,p.Wm)(a)])]),bn,(0,p._)("h2",mn,[dn,hn,(0,p._)("a",gn,[vn,(0,p.Wm)(a)])]),wn,(0,p._)("p",null,[fn,(0,p._)("a",yn,[_n,(0,p.Wm)(a)]),$n]),qn,(0,p._)("h2",Un,[xn,En,(0,p._)("a",Cn,[Mn,(0,p.Wm)(a)])]),Pn],64)}}}}]);