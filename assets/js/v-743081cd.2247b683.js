"use strict";(self.webpackChunkwhat_is_new_in_php=self.webpackChunkwhat_is_new_in_php||[]).push([[538],{9007:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-743081cd",path:"/7.2/",title:"PHP 7.2",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto"},excerpt:"",headers:[{level:2,title:"新的对象类型",slug:"新的对象类型",children:[]},{level:2,title:"通过名称加载扩展",slug:"通过名称加载扩展",children:[]},{level:2,title:"使用Argon2算法生成密码散列",slug:"使用argon2算法生成密码散列",children:[]},{level:2,title:"新增 ext/PDO（PDO扩展） 字符串扩展类型",slug:"新增-ext-pdo-pdo扩展-字符串扩展类型",children:[]},{level:2,title:"ext/sockets（sockets扩展）添加了地址信息",slug:"ext-sockets-sockets扩展-添加了地址信息",children:[]},{level:2,title:"扩展了参数类型",slug:"扩展了参数类型",children:[]},{level:2,title:"允许分组命名空间的尾部逗号",slug:"允许分组命名空间的尾部逗号",children:[]}],filePathRelative:"7.2/README.md",git:{updatedTime:1639656516e3,contributors:[]}}},4051:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var e=a(6252);const p=(0,e.uE)('<h1 id="php-7-2" tabindex="-1"><a class="header-anchor" href="#php-7-2" aria-hidden="true">#</a> PHP 7.2</h1><h2 id="新的对象类型" tabindex="-1"><a class="header-anchor" href="#新的对象类型" aria-hidden="true">#</a> 新的对象类型</h2><p>新的对象类型, object, 引进了可用于逆变（contravariant）参数输入和协变（covariant）返回任何对象类型。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">function</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token keyword type-hint">object</span> <span class="token variable">$obj</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">object</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SplQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StdClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token doc-comment comment">/**\nSplQueue Object\n(\n    [flags:SplDoublyLinkedList:private] =&gt; 4\n    [dllist:SplDoublyLinkedList:private] =&gt; Array\n        (\n        )\n\n)\n*/</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="通过名称加载扩展" tabindex="-1"><a class="header-anchor" href="#通过名称加载扩展" aria-hidden="true">#</a> 通过名称加载扩展</h2><p>扩展文件不再需要通过文件加载 (Unix 下以 <code>.so</code> 为文件扩展名，在 Windows 下以 <code>.dll</code> 为文件扩展名) 进行指定。</p>',6),t=(0,e.Uk)("可以在 "),l=(0,e._)("code",null,"php.ini",-1),o=(0,e.Uk)(" 配置文件进行启用, 也可以使用 "),c={href:"https://www.php.net/manual/zh/function.dl.php",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("dl()"),r=(0,e.Uk)(" 函数进行启用。"),u=(0,e.uE)('<h2 id="使用argon2算法生成密码散列" tabindex="-1"><a class="header-anchor" href="#使用argon2算法生成密码散列" aria-hidden="true">#</a> 使用Argon2算法生成密码散列</h2><p>Argon2 已经被加入到密码散列（password hashing） API (这些函数以 password_ 开头), 以下是暴露出来的常量:</p><ul><li><strong>PASSWORD_ARGON2I</strong></li><li><strong>PASSWORD_ARGON2_DEFAULT_MEMORY_COST</strong></li><li><strong>PASSWORD_ARGON2_DEFAULT_TIME_COST</strong></li><li><strong>PASSWORD_ARGON2_DEFAULT_THREADS</strong></li></ul><h2 id="新增-ext-pdo-pdo扩展-字符串扩展类型" tabindex="-1"><a class="header-anchor" href="#新增-ext-pdo-pdo扩展-字符串扩展类型" aria-hidden="true">#</a> 新增 ext/PDO（PDO扩展） 字符串扩展类型</h2><p>PDO的字符串类型已经扩展支持国际化的字符集。以下是扩展的常量：</p><ul><li><strong>PDO::PARAM_STR_NATL</strong></li><li><strong>PDO::PARAM_STR_CHAR</strong></li><li><strong>PDO::ATTR_DEFAULT_STR_PARAM</strong></li></ul><p>这些常量通过 <strong>PDO::PARAM_STR</strong> 利用位运算OR进行计算：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">quote</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;über&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token class-name">PARAM_STR</span> <span class="token operator">|</span> <span class="token class-name">PDO</span><span class="token operator">::</span><span class="token constant">PARAM_STR_NATL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="ext-sockets-sockets扩展-添加了地址信息" tabindex="-1"><a class="header-anchor" href="#ext-sockets-sockets扩展-添加了地址信息" aria-hidden="true">#</a> ext/sockets（sockets扩展）添加了地址信息</h2><p>sockets扩展现在具有查找地址信息的能力，且可以连接到这个地址，或者进行绑定和解析。为此添加了以下一些函数:</p><ul><li><strong>socket_addrinfo_lookup()</strong></li><li><strong>socket_addrinfo_connect()</strong></li><li><strong>socket_addrinfo_bind()</strong></li><li><strong>socket_addrinfo_explain()</strong></li></ul><h2 id="扩展了参数类型" tabindex="-1"><a class="header-anchor" href="#扩展了参数类型" aria-hidden="true">#</a> 扩展了参数类型</h2><p>重写方法和接口实现的参数类型现在可以省略。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">interface</span> <span class="token class-name-definition class-name">A</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">Test</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">A</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">Test</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// $input 变量的类型忽略，允许传入任意类型</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="允许分组命名空间的尾部逗号" tabindex="-1"><a class="header-anchor" href="#允许分组命名空间的尾部逗号" aria-hidden="true">#</a> 允许分组命名空间的尾部逗号</h2><p>命名空间可以在PHP 7中使用尾随逗号进行分组引入。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> Foo\\Bar\\<span class="token punctuation">{</span>\n    Foo<span class="token punctuation">,</span>\n    Bar<span class="token punctuation">,</span>\n    Baz<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',17),d={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[t,l,o,(0,e._)("a",c,[i,(0,e.Wm)(a)]),r]),u],64)}}}}]);