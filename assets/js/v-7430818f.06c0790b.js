"use strict";(self.webpackChunkwhat_is_new_in_php=self.webpackChunkwhat_is_new_in_php||[]).push([[864],{967:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-7430818f",path:"/7.0/",title:"PHP 7.0",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto"},excerpt:"",headers:[{level:2,title:"类型的声明",slug:"类型的声明",children:[]},{level:2,title:"参数类型声明",slug:"参数类型声明",children:[]},{level:2,title:"返回值类型声明",slug:"返回值类型声明",children:[]},{level:2,title:"新增操作符<==>",slug:"新增操作符",children:[]},{level:2,title:"新增操作符??",slug:"新增操作符-1",children:[]},{level:2,title:"命名空间引用优化",slug:"命名空间引用优化",children:[]}],filePathRelative:"7.0/README.md",git:{updatedTime:1629295643e3,contributors:[]}}},854:(n,s,a)=>{a.r(s),a.d(s,{default:()=>V});var p=a(252);const e=(0,p._)("h1",{id:"php-7-0",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#php-7-0","aria-hidden":"true"},"#"),(0,p.Uk)(" PHP 7.0")],-1),t=(0,p._)("h2",{id:"类型的声明",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#类型的声明","aria-hidden":"true"},"#"),(0,p.Uk)(" 类型的声明")],-1),l=(0,p._)("p",null,"可以使用字符串(string), 整数 (int), 浮点数 (float), 以及布尔值 (bool)，来声明函数的参数类型与函数返回值。",-1),c={id:"参数类型声明",tabindex:"-1"},o=(0,p._)("a",{class:"header-anchor",href:"#参数类型声明","aria-hidden":"true"},"#",-1),r=(0,p.Uk)(),u={href:"/docs/7.0/scalar_typehints.php",target:"_blank",rel:"noopener noreferrer"},i=(0,p.Uk)("参数类型声明"),k=(0,p.uE)('<div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">declare</span><span class="token punctuation">(</span>strict_types <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function-definition function">setAge</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$age</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function-definition function">setIsValid</span><span class="token punctuation">(</span><span class="token keyword type-hint">bool</span> <span class="token variable">$valid</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$valid</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 默认会进行自动类型转换</span>\n<span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// int(29)</span>\n<span class="token comment">// setAge(&#39;29&#39;); // 默认不定义`strict_types =1 ` 会返回 int(29) ；如果定义则会抛出错误</span>\n\n<span class="token comment">// 如果不能进行类型转换则会抛出错误</span>\n<span class="token comment">// setAge(&#39;abs&#39;); // 抛出错误</span>\n<span class="token comment">// setIsValid(&#39;abs&#39;); // 默认不定义`strict_types =1 ` 会返回 bool(true) ；如果定义则会抛出错误</span>\n<span class="token comment">// setIsValid([]); // 抛出错误</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><blockquote><p>标量类型声明 有两种模式: 强制 (默认) 和 严格模式。 declare(strict_types=1),必须放在文件的第一行执行代码，当前文件有效！</p></blockquote>',2),b={id:"返回值类型声明",tabindex:"-1"},m=(0,p._)("a",{class:"header-anchor",href:"#返回值类型声明","aria-hidden":"true"},"#",-1),d=(0,p.Uk)(),g={href:"/docs/7.0/return_type_declarations.php",target:"_blank",rel:"noopener noreferrer"},h=(0,p.Uk)("返回值类型声明"),v=(0,p.uE)('<div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function-definition function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">User</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// return []; // 如果定义了返回值类型，则不允许返回其他数据类型</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',1),f={id:"新增操作符",tabindex:"-1"},_=(0,p._)("a",{class:"header-anchor",href:"#新增操作符","aria-hidden":"true"},"#",-1),$=(0,p.Uk)(),y={href:"/docs/7.0/spaceships.php",target:"_blank",rel:"noopener noreferrer"},w=(0,p.Uk)("新增操作符"),q=(0,p._)("code",null,"<==>",-1),U=(0,p.uE)('<p>语法：<strong>$c = $a &lt;=&gt; $b</strong></p><p>如果$a &gt; $b, $c 的值为1</p><p>如果$a == $b, $c 的值为0</p><p>如果$a &lt; $b, $c 的值为-1</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token variable">$games</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;Mass Effact&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Super Maro Bros&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Zelda&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Fallout&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Metal Gear&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 语法：$c = $a &lt;=&gt; $b；</span>\n<span class="token comment">// 当$a &gt; $b, $c的值为1</span>\n<span class="token comment">// 当$a == $b, $c的值为0</span>\n<span class="token comment">// 当$a &lt; $b, $c 的值为-1</span>\n<span class="token function">usort</span><span class="token punctuation">(</span><span class="token variable">$games</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token variable">$b</span> <span class="token operator">&lt;=&gt;</span> <span class="token variable">$a</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$games</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// array(5) {[0]=&gt;string(5) &quot;Zelda&quot; [1]=&gt;string(15) &quot;Super Maro Bros&quot; [2]=&gt;string(10) &quot;Metal Gear&quot; [3]=&gt;string(11) &quot;Mass Effact&quot; [4]=&gt;string(7) &quot;Fallout&quot;}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',5),x={id:"新增操作符-1",tabindex:"-1"},A=(0,p._)("a",{class:"header-anchor",href:"#新增操作符-1","aria-hidden":"true"},"#",-1),E=(0,p.Uk)(),P={href:"/docs/7.0/null_coalesce_operator.php",target:"_blank",rel:"noopener noreferrer"},M=(0,p.Uk)("新增操作符"),G=(0,p._)("code",null,"??",-1),W=(0,p.uE)('<p>如果变量存在值且不为null，则返回自身的值，否则返回它的第二个操作数。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token comment">// Before</span>\n<span class="token variable">$name</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;guest&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// After</span>\n<span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string single-quoted-string">&#39;guest&#39;</span><span class="token punctuation">;</span>\n\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string(5) &quot;guest&quot;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',2),T={id:"命名空间引用优化",tabindex:"-1"},B=(0,p._)("a",{class:"header-anchor",href:"#命名空间引用优化","aria-hidden":"true"},"#",-1),C=(0,p.Uk)(),D={href:"/docs/7.0/grouped_imports/index.php",target:"_blank",rel:"noopener noreferrer"},H=(0,p.Uk)("命名空间引用优化"),I=(0,p.uE)('<p>在之前的php版本语法的写法是：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Animal</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Person</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>php7新语法写法是：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> App\\<span class="token punctuation">{</span>Animal<span class="token punctuation">,</span> Person<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment"># 或者将类换行</span>\n<span class="token keyword">use</span> App\\<span class="token punctuation">{</span>\n    Animal<span class="token punctuation">,</span>\n    Person\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment"># 如果命名空间下还有其他后缀的命名空间</span>\n<span class="token keyword">use</span> App\\<span class="token punctuation">{</span>\n    Animal<span class="token punctuation">,</span>\n    Person<span class="token punctuation">,</span>\n    Models\\User\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',4),V={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,t,l,(0,p._)("h2",c,[o,r,(0,p._)("a",u,[i,(0,p.Wm)(a)])]),k,(0,p._)("h2",b,[m,d,(0,p._)("a",g,[h,(0,p.Wm)(a)])]),v,(0,p._)("h2",f,[_,$,(0,p._)("a",y,[w,q,(0,p.Wm)(a)])]),U,(0,p._)("h2",x,[A,E,(0,p._)("a",P,[M,G,(0,p.Wm)(a)])]),W,(0,p._)("h2",T,[B,C,(0,p._)("a",D,[H,(0,p.Wm)(a)])]),I],64)}}}}]);