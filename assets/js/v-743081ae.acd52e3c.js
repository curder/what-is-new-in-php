"use strict";(self.webpackChunkwhat_is_new_in_php=self.webpackChunkwhat_is_new_in_php||[]).push([[960],{993:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-743081ae",path:"/7.1/",title:"PHP 7.1",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto"},excerpt:"",headers:[{level:3,title:"数组解构",slug:"数组解构",children:[]},{level:3,title:"nullable 和 忽略类型",slug:"nullable-和-忽略类型",children:[]},{level:3,title:"多错误处理",slug:"多错误处理",children:[]},{level:3,title:"Iterable 伪类",slug:"iterable-伪类",children:[]}],filePathRelative:"7.1/README.md",git:{updatedTime:1629295643e3,contributors:[]}}},731:(n,s,a)=>{a.r(s),a.d(s,{default:()=>N});var p=a(252);const t=(0,p._)("h1",{id:"php-7-1",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#php-7-1","aria-hidden":"true"},"#"),(0,p.Uk)(" PHP 7.1")],-1),e={id:"数组解构",tabindex:"-1"},o=(0,p._)("a",{class:"header-anchor",href:"#数组解构","aria-hidden":"true"},"#",-1),c=(0,p.Uk)(),l={href:"/docs/7.1/array_destructuring.php",target:"_blank",rel:"noopener noreferrer"},u=(0,p.Uk)("数组解构"),r=(0,p.uE)('<p>当我们需要解构数组的时候，通常会有如下操作：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$person</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;curder&#39;</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$person</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string(6) &quot;curder&quot; int(29)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面的例子可以写为：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$person</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;curder&#39;</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$person</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string(6) &quot;curder&quot; int(29)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>针对<code>key</code> =&gt; <code>value</code>键值队的解构如下：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$person</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;curder&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;age&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;hobby&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;study&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;hobby&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$hobby</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;age&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$age</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$person</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">,</span> <span class="token variable">$hobby</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string(6) &quot;curder&quot; int(29) string(5) &quot;study&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>多维数组的解构</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$persons</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;name&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;curder&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;age&quot;</span> <span class="token operator">=&gt;</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;hobby&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;study&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;name&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;lily&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;age&quot;</span> <span class="token operator">=&gt;</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;hobby&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;shopping&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;hobby&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$hobby</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;age&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$age</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$persons</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">,</span> <span class="token variable">$hobby</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string(4) &quot;lily&quot; int(25) string(8) &quot;shopping&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在<code>foreach</code>循环中同时进行解构赋值</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$persons</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;name&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;curder&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;age&quot;</span> <span class="token operator">=&gt;</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;hobby&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;study&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;name&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;lily&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;age&quot;</span> <span class="token operator">=&gt;</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;hobby&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;shopping&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$persons</span> <span class="token keyword">as</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;hobby&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$hobby</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;age&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$age</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">,</span> <span class="token variable">$hobby</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',10),i={id:"nullable-和-忽略类型",tabindex:"-1"},k=(0,p._)("a",{class:"header-anchor",href:"#nullable-和-忽略类型","aria-hidden":"true"},"#",-1),b=(0,p.Uk)(),d={href:"/docs/7.1/nullable_and_void_type.php",target:"_blank",rel:"noopener noreferrer"},m=(0,p.Uk)("nullable 和 忽略类型"),g=(0,p.uE)('<p>定义方法返回的数据类型。当返回的不是制定类型时，则返回<code>null</code></p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">protected</span> <span class="token variable">$age</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// public function __construct($age)</span>\n    <span class="token comment">// {</span>\n    <span class="token comment">//     $this-&gt;age = $age;</span>\n    <span class="token comment">// }</span>\n\n    <span class="token comment">// 定义方法返回的数据类型，当返回的不是制定类型时，则返回null</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">int</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">age</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token variable">$age</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NULL</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>定义方法参数类型和返回值为<code>void</code></p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">subscribe</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token keyword type-hint">callable</span> <span class="token variable">$callback</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>\n    <span class="token punctuation">{</span>\n        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;subscribing here&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$callback</span><span class="token punctuation">)</span> <span class="token variable">$callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token variable">$age</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string(16) &quot;subscribing here&quot;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',4),h={id:"多错误处理",tabindex:"-1"},v=(0,p._)("a",{class:"header-anchor",href:"#多错误处理","aria-hidden":"true"},"#",-1),q=(0,p.Uk)(),y={href:"/docs/7.1/multi_catch_exception_handling.php",target:"_blank",rel:"noopener noreferrer"},f=(0,p.Uk)("多错误处理"),w=(0,p.uE)('<p>之前处理错误时，会使用 <code>try</code> <code>catch</code>关键字对各种错误进行处理，但是有时候我们的逻辑需要对一些错误做统一的处理，在php7.1中可以使用<code>|</code>来分割多个错误进行统一处理。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token comment">// 定义两个自定义的错误类</span>\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">ChargeRejected</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">NotEnoughFounds</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;subscrbing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// throw new ChargeRejected;</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotEnoughFounds</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ChargeRejected</span> <span class="token operator">|</span> <span class="token class-name">NotEnoughFounds</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 当try里的逻辑抛出 ChargeRejected 或者 NotEnoughFounds 错误时都会执行下面的逻辑</span>\n    <span class="token function">flash</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function-definition function">flash</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>',2),$={id:"iterable-伪类",tabindex:"-1"},_=(0,p._)("a",{class:"header-anchor",href:"#iterable-伪类","aria-hidden":"true"},"#",-1),x=(0,p.Uk)(),U={href:"/docs/7.1/iterables.php",target:"_blank",rel:"noopener noreferrer"},E=(0,p.Uk)("Iterable 伪类"),C=(0,p.uE)('<p><code>iterable</code> 被称为伪类，它可以被用在参数或者返回值类型中。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">function</span> <span class="token function-definition function">dump</span><span class="token punctuation">(</span><span class="token keyword type-hint">iterable</span> <span class="token variable">$items</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$items</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">Collection</span> <span class="token keyword">implements</span> <span class="token class-name">IteratorAggregate</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">protected</span> <span class="token variable">$items</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">items</span> <span class="token operator">=</span> <span class="token variable">$items</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIterator</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">items</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">dump</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;two&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;three&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string(3) &quot;one&quot; string(3) &quot;two&quot; string(5) &quot;three&quot;</span>\n<span class="token function">dump</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Collection</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// int(1) int(2) int(3)</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>',2),N={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("h3",e,[o,c,(0,p._)("a",l,[u,(0,p.Wm)(a)])]),r,(0,p._)("h3",i,[k,b,(0,p._)("a",d,[m,(0,p.Wm)(a)])]),g,(0,p._)("h3",h,[v,q,(0,p._)("a",y,[f,(0,p.Wm)(a)])]),w,(0,p._)("h3",$,[_,x,(0,p._)("a",U,[E,(0,p.Wm)(a)])]),C],64)}}}}]);