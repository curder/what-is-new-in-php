"use strict";(self.webpackChunkwhat_is_new_in_php=self.webpackChunkwhat_is_new_in_php||[]).push([[864],{4967:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-7430818f",path:"/7.0/",title:"PHP 7.0",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto"},excerpt:"",headers:[{level:2,title:"标量类型声明",slug:"标量类型声明",children:[]},{level:2,title:"返回值类型声明",slug:"返回值类型声明",children:[]},{level:2,title:"null 合并运算符",slug:"null-合并运算符",children:[]},{level:2,title:"<=>操作符（组合比较符）",slug:"操作符-组合比较符",children:[]},{level:2,title:"通过 define() 定义常量数组",slug:"通过-define-定义常量数组",children:[]},{level:2,title:"匿名类",slug:"匿名类",children:[]},{level:2,title:"Unicode codepoint 转译语法",slug:"unicode-codepoint-转译语法",children:[]},{level:2,title:"Closure::call()",slug:"closure-call",children:[]},{level:2,title:"为 unserialize() 提供过滤",slug:"为-unserialize-提供过滤",children:[]},{level:2,title:"IntlChar",slug:"intlchar",children:[]},{level:2,title:"预期",slug:"预期",children:[]},{level:2,title:"命名空间引用优化",slug:"命名空间引用优化",children:[]},{level:2,title:"生成器可以返回表达式",slug:"生成器可以返回表达式",children:[]},{level:2,title:"生成器委托",slug:"生成器委托",children:[]},{level:2,title:"整数除法函数 intdiv()",slug:"整数除法函数-intdiv",children:[]},{level:2,title:"会话选项",slug:"会话选项",children:[]},{level:2,title:"preg_replace_callback_array()",slug:"preg-replace-callback-array",children:[]},{level:2,title:"CSPRNG 函数",slug:"csprng-函数",children:[]},{level:2,title:"list() 函数展开 ArrayAccess 接口的对象",slug:"list-函数展开-arrayaccess-接口的对象",children:[]},{level:2,title:"其他特性",slug:"其他特性",children:[]}],filePathRelative:"7.0/README.md",git:{updatedTime:1646965991e3,contributors:[]}}},9265:(n,s,a)=>{a.r(s),a.d(s,{default:()=>D});var p=a(6252);const e=(0,p.uE)('<h1 id="php-7-0" tabindex="-1"><a class="header-anchor" href="#php-7-0" aria-hidden="true">#</a> PHP 7.0</h1><p>PHP 7.0 给开发者带来很多新特性，它们包括：</p><h2 id="标量类型声明" tabindex="-1"><a class="header-anchor" href="#标量类型声明" aria-hidden="true">#</a> 标量类型声明</h2><p>可以使用字符串 <code>string</code>, 整数 <code>int</code>, 浮点数 <code>float</code>, 以及布尔值 <code>bool</code>，来声明函数的参数类型与函数返回值。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">declare</span><span class="token punctuation">(</span>strict_types <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function-definition function">setAge</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$age</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function-definition function">setIsValid</span><span class="token punctuation">(</span><span class="token keyword type-hint">bool</span> <span class="token variable">$valid</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$valid</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 默认会进行自动类型转换</span>\n<span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// int(29)</span>\n<span class="token comment">// setAge(&#39;29&#39;); // 默认不定义`strict_types = 1` 会返回 int(29)；如果定义则会抛出错误</span>\n\n<span class="token comment">// 如果不能进行类型转换则会抛出错误</span>\n<span class="token comment">// setAge(&#39;abs&#39;); // 抛出错误</span>\n<span class="token comment">// setIsValid(&#39;abs&#39;); // 默认不定义`strict_types = 1` 会返回 bool(true)；如果定义则会抛出错误</span>\n<span class="token comment">// setIsValid([]); // 抛出错误</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><blockquote><p>标量类型声明 有两种模式: 强制 (默认) 和 严格模式。 declare(strict_types=1),必须放在文件的第一行执行代码，当前文件有效！</p></blockquote><h2 id="返回值类型声明" tabindex="-1"><a class="header-anchor" href="#返回值类型声明" aria-hidden="true">#</a> 返回值类型声明</h2><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function-definition function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">User</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>如果定义了返回值类型，则不允许返回其他数据类型</p></blockquote><h2 id="null-合并运算符" tabindex="-1"><a class="header-anchor" href="#null-合并运算符" aria-hidden="true">#</a> <code>null</code> 合并运算符</h2><p>在实际开发中存在大量同时使用三元表达式和 <code>isset()</code> 判定变量是否存在的情况， PHP 7.0 添加了 <code>null</code> 合并运算符 (<code>??</code>) 这个语法糖。</p><p>如果变量存在且值不为<code>null</code>，它就会返回自身的值，否则返回它的第二个操作数。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token comment">// 从全局变量中获取user的值，如果存在则使用，否则返回 nobody，类似于：isset($_GET[&#39;user&#39;]) ? $_GET[&#39;user&#39;] : &#39;nobody&#39;;</span>\n<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;user&#39;</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string single-quoted-string">&#39;nobody&#39;</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 先计算 $_GET[&#39;user&#39;] 是否存在，再计算 $_POST[&#39;user&#39;] 是否存在，最后如果都不存在则返回 nobody</span>\n<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;user&#39;</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;user&#39;</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string single-quoted-string">&#39;nobody&#39;</span><span class="token punctuation">;</span> \n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="操作符-组合比较符" tabindex="-1"><a class="header-anchor" href="#操作符-组合比较符" aria-hidden="true">#</a> <code>&lt;=&gt;</code>操作符（组合比较符）</h2><p>太空船操作符用于比较两个表达式。当 <code>$a</code> 小于、等于或大于 <code>$b</code> 时它分别返回 <code>-1</code>、<code>0</code>或<code>1</code>。</p><p><strong>语法</strong>：<code>$c = $a &lt;=&gt; $b</code></p><ul><li><p>当 <code>$a &gt; $b</code>, 则 <code>$c</code> 的值为 <code>1</code></p></li><li><p>当 <code>$a == $b</code>, 则 <code>$c</code> 的值为 <code>0</code></p></li><li><p>当 <code>$a &lt; $b</code>, 则 <code>$c</code> 的值为 <code>-1</code></p></li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// 整数</span>\n<span class="token keyword">echo</span> <span class="token number">1</span> <span class="token operator">&lt;=&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token keyword">echo</span> <span class="token number">1</span> <span class="token operator">&lt;=&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>\n<span class="token keyword">echo</span> <span class="token number">2</span> <span class="token operator">&lt;=&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n\n<span class="token comment">// 浮点数</span>\n<span class="token keyword">echo</span> <span class="token number">1.5</span> <span class="token operator">&lt;=&gt;</span> <span class="token number">1.5</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token keyword">echo</span> <span class="token number">1.5</span> <span class="token operator">&lt;=&gt;</span> <span class="token number">2.5</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>\n<span class="token keyword">echo</span> <span class="token number">2.5</span> <span class="token operator">&lt;=&gt;</span> <span class="token number">1.5</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n \n<span class="token comment">// 字符串</span>\n<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;a&quot;</span> <span class="token operator">&lt;=&gt;</span> <span class="token string double-quoted-string">&quot;a&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;a&quot;</span> <span class="token operator">&lt;=&gt;</span> <span class="token string double-quoted-string">&quot;b&quot;</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>\n<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;b&quot;</span> <span class="token operator">&lt;=&gt;</span> <span class="token string double-quoted-string">&quot;a&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="通过-define-定义常量数组" tabindex="-1"><a class="header-anchor" href="#通过-define-定义常量数组" aria-hidden="true">#</a> 通过 <code>define()</code> 定义常量数组</h2><p>Array 类型的常量在 PHP 7.0 可以通过 <code>define()</code> 来定义。在 <code>PHP 5.6</code> 中仅能通过 <code>const</code> 定义。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ANIMALS&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n    <span class="token string single-quoted-string">&#39;dog&#39;</span><span class="token punctuation">,</span>\n    <span class="token string single-quoted-string">&#39;cat&#39;</span><span class="token punctuation">,</span>\n    <span class="token string single-quoted-string">&#39;bird&#39;</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">echo</span> <span class="token constant">ANIMALS</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;cat&quot;</span>\n<span class="token delimiter important">?&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="匿名类" tabindex="-1"><a class="header-anchor" href="#匿名类" aria-hidden="true">#</a> 匿名类</h2>',22),t=(0,p.Uk)("支持通过 "),o=(0,p._)("code",null,"new class",-1),c=(0,p.Uk)(" 来实例化一个"),l={href:"https://www.php.net/manual/zh/language.oop5.anonymous.php",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("匿名类"),i=(0,p.Uk)("，这可以用来替代一些“用后即焚”的完整类定义。"),u=(0,p.uE)('<div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">interface</span> <span class="token class-name-definition class-name">Logger</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">log</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$msg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">Application</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token variable">$logger</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Logger</span> <span class="token punctuation">{</span>\n         <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">logger</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setLogger</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Logger</span> <span class="token variable">$logger</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">logger</span> <span class="token operator">=</span> <span class="token variable">$logger</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token variable">$app</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">;</span>\n<span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">setLogger</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">implements</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">log</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">echo</span> <span class="token variable">$msg</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/*\n代码运行会输出：\nobject(class@anonymous)#2 (0) {\n}\n */</span>\n<span class="token delimiter important">?&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="unicode-codepoint-转译语法" tabindex="-1"><a class="header-anchor" href="#unicode-codepoint-转译语法" aria-hidden="true">#</a> Unicode codepoint 转译语法</h2><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;\\u{aa}&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;\\u{0000aa}&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;\\u{9999}&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">/*\nª\nª (same as before but with optional leading 0&#39;s)\n香\n*/</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="closure-call" tabindex="-1"><a class="header-anchor" href="#closure-call" aria-hidden="true">#</a> <code>Closure::call()</code></h2><p><code>Closure::call()</code> 现在有着更好的性能，简短干练的暂时绑定一个方法到对象闭包并调用它。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n\n<span class="token comment">// PHP 7 之前版本的代码</span>\n<span class="token variable">$getXCB</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">x</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token variable">$getX</span> <span class="token operator">=</span> <span class="token variable">$getXCB</span><span class="token operator">-&gt;</span><span class="token function">bindTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 中间层闭包</span>\n<span class="token keyword">echo</span> <span class="token variable">$getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// PHP 7+ 及更高版本的代码</span>\n<span class="token variable">$getX</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">x</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">echo</span> <span class="token variable">$getX</span><span class="token operator">-&gt;</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="为-unserialize-提供过滤" tabindex="-1"><a class="header-anchor" href="#为-unserialize-提供过滤" aria-hidden="true">#</a> 为 <code>unserialize()</code> 提供过滤</h2><p>这个特性旨在提供更安全的方式解包不可靠的数据。它通过白名单的方式来防止潜在的代码注入。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// 将所有的对象都转换为 __PHP_Incomplete_Class 对象</span>\n<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$foo</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;allowed_classes&quot;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 将除 MyClass 和 MyClass2 之外的所有对象都转换为 __PHP_Incomplete_Class 对象</span>\n<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$foo</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;allowed_classes&quot;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;MyClass&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;MyClass2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 默认情况下所有的类都是可接受的，等同于省略第二个参数</span>\n<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$foo</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;allowed_classes&quot;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="intlchar" tabindex="-1"><a class="header-anchor" href="#intlchar" aria-hidden="true">#</a> IntlChar</h2><p>新增加的 IntlChar 类旨在暴露出更多的 ICU 功能。</p><p>这个类自身定义了许多静态方法用于操作多字符集的 <code>unicode</code> 字符。</p>',12),k=(0,p.Uk)("若要使用此类，请先安装 "),b={href:"https://www.php.net/manual/zh/book.intl.php",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("Intl扩展"),m=(0,p.Uk)("。"),h=(0,p.uE)('<div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;%x&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">IntlChar</span><span class="token operator">::</span><span class="token constant">CODEPOINT_MAX</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">echo</span> <span class="token class-name static-context">IntlChar</span><span class="token operator">::</span><span class="token function">charName</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;@&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token class-name static-context">IntlChar</span><span class="token operator">::</span><span class="token function">ispunct</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">/*\n以上例程会输出：\n\n10ffff\nCOMMERCIAL AT\nbool(true)\n*/</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="预期" tabindex="-1"><a class="header-anchor" href="#预期" aria-hidden="true">#</a> 预期</h2><p>预期是向后兼用并增强之前的 <code>assert()</code> 的方法。 它使得在生产环境中启用断言为零成本，并且提供当断言失败时抛出特定异常的能力。</p><p>老版本的API出于兼容目的将继续被维护，<code>assert()</code> 现在是一个语言结构，它允许第一个参数是一个表达式，而不仅仅是一个待计算的 <code>string</code> 或一个待测试的 <code>boolean</code>。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;assert.exception&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">CustomError</span> <span class="token keyword">extends</span> <span class="token class-name">AssertionError</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token function">assert</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CustomError</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Some error message&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Fatal error: Uncaught CustomError: Some error message</span>\n<span class="token delimiter important">?&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',5),g=(0,p.Uk)("关于这个特性的完整说明，包括如何在开发和生产环境中配置它，可以在 "),f={href:"https://www.php.net/manual/zh/function.assert.php",target:"_blank",rel:"noopener noreferrer"},v=(0,p.Uk)("assert()"),y=(0,p.Uk)(" 的 "),w={href:"https://www.php.net/manual/zh/function.assert.php#function.assert.expectations",target:"_blank",rel:"noopener noreferrer"},_=(0,p.Uk)("expectations section"),q=(0,p.Uk)(" 章节找到。"),$=(0,p.uE)('<h2 id="命名空间引用优化" tabindex="-1"><a class="header-anchor" href="#命名空间引用优化" aria-hidden="true">#</a> 命名空间引用优化</h2><p>从同一命名空间导入的类、函数和常量现在可以通过单个 use 语句一次性导入。</p><p>在之前的php版本语法的写法是：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token comment">// PHP 7 之前的代码</span>\n<span class="token keyword">use</span> <span class="token package">some<span class="token punctuation">\\</span>namespace<span class="token punctuation">\\</span>ClassA</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">some<span class="token punctuation">\\</span>namespace<span class="token punctuation">\\</span>ClassB</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">some<span class="token punctuation">\\</span>namespace<span class="token punctuation">\\</span>ClassC</span> <span class="token keyword">as</span> <span class="token constant">C</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token keyword">function</span> <span class="token package">some<span class="token punctuation">\\</span>namespace<span class="token punctuation">\\</span>fn_a</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token keyword">function</span> <span class="token package">some<span class="token punctuation">\\</span>namespace<span class="token punctuation">\\</span>fn_b</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token keyword">function</span> <span class="token package">some<span class="token punctuation">\\</span>namespace<span class="token punctuation">\\</span>fn_c</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">const</span> some\\<span class="token keyword">namespace</span>\\ConstA<span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">const</span> some\\<span class="token keyword">namespace</span>\\ConstB<span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">const</span> some\\<span class="token keyword">namespace</span>\\ConstC<span class="token punctuation">;</span>\n\n<span class="token comment">// PHP 7+ 及更高版本的代码</span>\n<span class="token keyword">use</span> some\\<span class="token keyword">namespace</span>\\<span class="token punctuation">{</span>ClassA<span class="token punctuation">,</span> ClassB<span class="token punctuation">,</span> ClassC <span class="token keyword">as</span> <span class="token constant">C</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">function</span> some\\<span class="token keyword">namespace</span>\\<span class="token punctuation">{</span>fn_a<span class="token punctuation">,</span> fn_b<span class="token punctuation">,</span> fn_c<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">const</span> some\\<span class="token keyword">namespace</span>\\<span class="token punctuation">{</span>ConstA<span class="token punctuation">,</span> ConstB<span class="token punctuation">,</span> ConstC<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="生成器可以返回表达式" tabindex="-1"><a class="header-anchor" href="#生成器可以返回表达式" aria-hidden="true">#</a> 生成器可以返回表达式</h2><p>此特性基于 PHP 5.5 版本中引入的生成器特性构建的。</p><p>它允许在生成器函数中通过使用 <code>return</code> 语法来返回一个表达式 （但是不允许返回引用值）， 可以通过调用 <code>Generator::getReturn()</code> 方法来获取生成器的返回值， 但是这个方法只能在生成器完成产生工作以后调用一次。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token variable">$gen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$gen</span> <span class="token keyword">as</span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">echo</span> <span class="token variable">$val</span><span class="token punctuation">,</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">echo</span> <span class="token variable">$gen</span><span class="token operator">-&gt;</span><span class="token function">getReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n输出：\n\n1\n2\n3\n */</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>在生成器中能够返回最终的值是一个非常便利的特性， 因为它使得调用生成器的客户端代码可以直接得到生成器（或者其他协同计算）的返回值， 相对于之前版本中客户端代码必须先检查生成器是否产生了最终的值然后再进行响应处理来得方便多了。</p><h2 id="生成器委托" tabindex="-1"><a class="header-anchor" href="#生成器委托" aria-hidden="true">#</a> 生成器委托</h2><p>现在，只需在最外层生成其中使用 yield from， 就可以把一个生成器自动委派给其他的生成器， Traversable 对象或者 array。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">function</span> <span class="token function-definition function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">yield</span> <span class="token keyword">from</span> <span class="token function">gen2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function-definition function">gen2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span>\n    <span class="token keyword">yield</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$val</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">echo</span> <span class="token variable">$val</span><span class="token punctuation">,</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n1\n2\n3\n4\n */</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="整数除法函数-intdiv" tabindex="-1"><a class="header-anchor" href="#整数除法函数-intdiv" aria-hidden="true">#</a> 整数除法函数 <code>intdiv()</code></h2><p>新加的函数 <code>intdiv()</code> 用来进行 整数的除法运算。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">intdiv</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// int(3)</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="会话选项" tabindex="-1"><a class="header-anchor" href="#会话选项" aria-hidden="true">#</a> 会话选项</h2><p><code>session_start()</code> 可以接受一个 <code>array</code> 作为参数， 用来覆盖 <code>php.ini</code> 文件中设置的会话配置选项。</p><p>在调用 <code>session_start()</code> 的时候， 传入的选项参数中也支持 <code>session.lazy_write</code> 行为， 默认情况下这个配置项是打开的。</p><p>它的作用是控制 PHP 只有在会话中的数据发生变化的时候才写入会话存储文件，如果会话中的数据没有发生改变，那么 PHP 会在读取完会话数据之后， 立即关闭会话存储文件，不做任何修改，可以通过设置 <code>read_and_close</code> 来实现。</p>',19),x=(0,p.Uk)("例如，下列代码设置 "),C={href:"https://www.php.net/manual/zh/session.configuration.php#ini.session.cache-limiter",target:"_blank",rel:"noopener noreferrer"},P=(0,p._)("code",null,"session.cache_limiter",-1),A=(0,p.Uk)(" 为 "),U=(0,p._)("code",null,"private",-1),E=(0,p.Uk)("，并且在读取完毕会话数据之后马上关闭会话存储文件。"),z=(0,p.uE)('<div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token string single-quoted-string">&#39;cache_limiter&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;private&#39;</span><span class="token punctuation">,</span>\n    <span class="token string single-quoted-string">&#39;read_and_close&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="preg-replace-callback-array" tabindex="-1"><a class="header-anchor" href="#preg-replace-callback-array" aria-hidden="true">#</a> <code>preg_replace_callback_array()</code></h2><p>在 PHP 7 之前，当使用 <code>preg_replace_callback()</code> 函数的时候，由于针对每个正则表达式都要执行回调函数，可能导致过多的分支代码。</p><p>而使用新加的 <code>preg_replace_callback_array()</code> 函数，可以使得代码更加简洁。</p><p>现在，可以使用一个关联数组来对每个正则表达式注册回调函数，正则表达式本身作为关联数组的键，而对应的回调函数就是关联数组的值。</p>',5),H={id:"csprng-函数",tabindex:"-1"},I=(0,p._)("a",{class:"header-anchor",href:"#csprng-函数","aria-hidden":"true"},"#",-1),L=(0,p.Uk)(),T={href:"https://www.php.net/manual/zh/book.csprng.php",target:"_blank",rel:"noopener noreferrer"},M=(0,p.Uk)("CSPRNG 函数"),O=(0,p.Uk)("新加入两个跨平台的函数："),G={href:"https://www.php.net/manual/zh/function.random-bytes.php",target:"_blank",rel:"noopener noreferrer"},S=(0,p.Uk)("random_bytes()"),W=(0,p.Uk)(" 和 "),N={href:"https://www.php.net/manual/zh/function.random-int.php",target:"_blank",rel:"noopener noreferrer"},R=(0,p.Uk)("random_int()"),X=(0,p.Uk)(" 用来产生高安全级别的随机字符串和随机整数。"),B=(0,p.uE)('<div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token variable">$bytes</span> <span class="token operator">=</span> <span class="token function">random_bytes</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">echo</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token variable">$bytes</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 17f0e357144a</span>\n\n<span class="token keyword">echo</span> <span class="token function">random_int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 623</span>\n<span class="token keyword">echo</span> <span class="token function">random_int</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -460</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="list-函数展开-arrayaccess-接口的对象" tabindex="-1"><a class="header-anchor" href="#list-函数展开-arrayaccess-接口的对象" aria-hidden="true">#</a> <code>list()</code> 函数展开 ArrayAccess 接口的对象</h2><p>在之前版本中，<code>list()</code> 函数不能保证正确的展开实现了 <code>ArrayAccess</code> 接口的对象，现在这个问题已经被修复。</p><h2 id="其他特性" tabindex="-1"><a class="header-anchor" href="#其他特性" aria-hidden="true">#</a> 其他特性</h2><p>允许在克隆表达式上访问对象成员，例如：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token punctuation">(</span><span class="token keyword">clone</span> <span class="token variable">$foo</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>允许使用字符串的变量类名调用</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">foo</span> <span class="token punctuation">{</span> <span class="token keyword">static</span> <span class="token variable">$bar</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;baz&#39;</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;world&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;foo&#39;</span><span class="token operator">::</span><span class="token variable">$bar</span><span class="token punctuation">;</span> <span class="token comment">// baz</span>\n<span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;foo&#39;</span><span class="token operator">::</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// world </span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',8),D={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("p",null,[t,o,c,(0,p._)("a",l,[r,(0,p.Wm)(a)]),i]),u,(0,p._)("p",null,[k,(0,p._)("a",b,[d,(0,p.Wm)(a)]),m]),h,(0,p._)("p",null,[g,(0,p._)("a",f,[v,(0,p.Wm)(a)]),y,(0,p._)("a",w,[_,(0,p.Wm)(a)]),q]),$,(0,p._)("p",null,[x,(0,p._)("a",C,[P,(0,p.Wm)(a)]),A,U,E]),z,(0,p._)("h2",H,[I,L,(0,p._)("a",T,[M,(0,p.Wm)(a)])]),(0,p._)("p",null,[O,(0,p._)("a",G,[S,(0,p.Wm)(a)]),W,(0,p._)("a",N,[R,(0,p.Wm)(a)]),X]),B],64)}}}}]);