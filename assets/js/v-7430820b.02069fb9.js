"use strict";(self.webpackChunkwhat_is_new_in_php=self.webpackChunkwhat_is_new_in_php||[]).push([[375],{6438:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-7430820b",path:"/7.4/",title:"PHP 7.4",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto"},excerpt:"",headers:[{level:2,title:"箭头函数",slug:"箭头函数",children:[]},{level:2,title:"类型属性",slug:"类型属性",children:[]},{level:2,title:"改进的类型差异",slug:"改进的类型差异",children:[]},{level:2,title:"Null 合并运算符",slug:"null-合并运算符",children:[]},{level:2,title:"数组展开运算符",slug:"数组展开运算符",children:[]},{level:2,title:"数值分隔符",slug:"数值分隔符",children:[]},{level:2,title:"三元运算符弃用",slug:"三元运算符弃用",children:[]},{level:2,title:"串联优先",slug:"串联优先",children:[]},{level:2,title:"无效的数组访问警告",slug:"无效的数组访问警告",children:[]},{level:2,title:"strip_tags 接受数组",slug:"strip-tags-接受数组",children:[]}],filePathRelative:"7.4/README.md",git:{updatedTime:1639656516e3,contributors:[]}}},6689:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="php-7-4" tabindex="-1"><a class="header-anchor" href="#php-7-4" aria-hidden="true">#</a> PHP 7.4</h1><p>PHP 7.4是PHP的最新稳定版本。</p><p>它于2019年11月28日发布，是 PHP 8 之前的最新版本。</p><p>它带来了许多新函数，语法添加和修复。</p><h2 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a> 箭头函数</h2><p>箭头函数也称为&quot;短闭包&quot;，它允许较少冗长的单行函数。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// 之前的写法：</span>\n<span class="token function">array_map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">return</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token variable">$users</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 现在的写法：</span>\n<span class="token function">array_map</span><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">,</span> <span class="token variable">$users</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="类型属性" tabindex="-1"><a class="header-anchor" href="#类型属性" aria-hidden="true">#</a> 类型属性</h2><p>类型的声明，类型提示，以及指定确定类型的变量传递给函数或类的方法。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword type-declaration">int</span> <span class="token variable">$id</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$name</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>除了 <code>void</code> 和 <code>callable</code> 外，所有的类型都支持。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword type-declaration">int</span> <span class="token variable">$scalarType</span><span class="token punctuation">;</span>\n<span class="token keyword">protected</span> <span class="token class-name type-declaration">ClassName</span> <span class="token variable">$classType</span><span class="token punctuation">;</span>\n<span class="token keyword">private</span> <span class="token operator">?</span><span class="token class-name type-declaration">ClassName</span> <span class="token variable">$nullableClassType</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>为什么不支持 void 和 callable？下面是 RFC 的解释</p><blockquote><p>The void type is not supported, because it is not useful and has unclear semantics. 不支持 void 类型，是因为它没用，并且语义不清晰。</p><p>The callable type is not supported, because its behavior is context dependent. 不支持 callable 类型，因为其行为取决于上下文。</p></blockquote><p>因此，我们可以放心使用 bool，int，float，string，array，object，iterable，self，parent，当然还有我们很少使用的 nullable 空允许 (?type)</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// 静态属性的类型</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword type-declaration">iterable</span> <span class="token variable">$staticProp</span><span class="token punctuation">;</span>\n\n<span class="token comment">// var 中声明属性</span>\n<span class="token keyword">var</span> <span class="token keyword type-declaration">bool</span> <span class="token variable">$flagl</span>\n\n<span class="token comment">// 设置默认的值</span>\n<span class="token comment">// 注意，只有 nullable 的类型，才能设置默认值为 null</span>\n<span class="token keyword">public</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;foo&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">public</span> <span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$nullableStr</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 多个同类型变量的声明</span>\n<span class="token keyword">public</span> <span class="token keyword type-declaration">float</span> <span class="token variable">$x</span><span class="token punctuation">,</span> <span class="token variable">$y</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>如果传递不符合给定类型的变量，会发生什么?</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword type-declaration">int</span> <span class="token variable">$id</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$name</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span>\n<span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">id</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 这个会产生一个致命的错误 Fatal error: Uncaught TypeError: Typed property User::$name must be string, array used in /app/types.php:9</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="改进的类型差异" tabindex="-1"><a class="header-anchor" href="#改进的类型差异" aria-hidden="true">#</a> 改进的类型差异</h2><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">ParentType</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">ChildType</span> <span class="token keyword">extends</span> <span class="token class-name">ParentType</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">covariantReturnTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">ParentType</span>\n    <span class="token punctuation">{</span> <span class="token comment">/* … */</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">covariantReturnTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">ChildType</span>\n    <span class="token punctuation">{</span> <span class="token comment">/* … */</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">contraVariantArguments</span><span class="token punctuation">(</span><span class="token class-name type-declaration">ChildType</span> <span class="token variable">$type</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span> <span class="token comment">/* … */</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">contraVariantArguments</span><span class="token punctuation">(</span><span class="token class-name type-declaration">ParentType</span> <span class="token variable">$type</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span> <span class="token comment">/* … */</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="null-合并运算符" tabindex="-1"><a class="header-anchor" href="#null-合并运算符" aria-hidden="true">#</a> Null 合并运算符</h2><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// 之前</span>\n<span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;date&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;date&#39;</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 现在</span>\n<span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;date&#39;</span><span class="token punctuation">]</span> <span class="token operator">??=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="数组展开运算符" tabindex="-1"><a class="header-anchor" href="#数组展开运算符" aria-hidden="true">#</a> 数组展开运算符</h2><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$arrayA</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token variable">$arrayB</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token variable">$arrayA</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token variable">$arrayB</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 3, 4, 5, 6, 7]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p><strong>注意：</strong> 仅适用于带数字键的数组。</p></blockquote><h2 id="数值分隔符" tabindex="-1"><a class="header-anchor" href="#数值分隔符" aria-hidden="true">#</a> 数值分隔符</h2><p>PHP 7.4允许使用下划线在视觉上分隔数字值。 看起来像这样:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$unFormattedNumber</span> <span class="token operator">=</span> <span class="token number">107925284.88</span><span class="token punctuation">;</span>\n<span class="token variable">$formattedNumber</span> <span class="token operator">=</span> <span class="token number">107_925_284.88</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>下划线仅被引擎忽略。</p><h2 id="三元运算符弃用" tabindex="-1"><a class="header-anchor" href="#三元运算符弃用" aria-hidden="true">#</a> 三元运算符弃用</h2><p>该RFC为嵌套三元语句添加了弃用警告。 在PHP 8中，此弃用将转换为编译时错误。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment">// deprecated</span>\n<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="串联优先" tabindex="-1"><a class="header-anchor" href="#串联优先" aria-hidden="true">#</a> 串联优先</h2><p>如果要编写这样的内容:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;sum: &quot;</span> <span class="token operator">.</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>PHP以前会这样解释它:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;sum: &quot;</span> <span class="token operator">.</span> <span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>PHP 8将使其如此解释:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;sum: &quot;</span> <span class="token operator">.</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>当遇到在 <code>+</code> 或 <code>-</code> 符号之前的包含的未括号表达式时，PHP 7.4 添加了弃用警告。</p><h2 id="无效的数组访问警告" tabindex="-1"><a class="header-anchor" href="#无效的数组访问警告" aria-hidden="true">#</a> 无效的数组访问警告</h2><p>如果要对一个整数使用数组访问语法； PHP以前会返回 null 。 从PHP 7.4开始，将发出通知。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n<span class="token variable">$i</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Notice</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="strip-tags-接受数组" tabindex="-1"><a class="header-anchor" href="#strip-tags-接受数组" aria-hidden="true">#</a> strip_tags 接受数组</h2><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// 您过去只能剥离多个标签</span>\n<span class="token function">strip_tags</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&lt;a&gt;&lt;p&gt;&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// PHP 7.4还允许使用数组</span>\n<span class="token function">strip_tags</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;p&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',46),e={render:function(n,s){return p}}}}]);