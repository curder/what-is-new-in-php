import{_ as s,o as a,c as n,S as l}from"./chunks/framework.7a872c5a.js";const i=JSON.parse('{"title":"PHP 7.0","description":"","frontmatter":{"sidebarDepth":3,"sidebar":"auto"},"headers":[],"relativePath":"7.0/index.md","filePath":"7.0/index.md","lastUpdated":1692958950000}'),p={name:"7.0/index.md"},o=l(`<h1 id="php-7-0" tabindex="-1">PHP 7.0 <a class="header-anchor" href="#php-7-0" aria-label="Permalink to &quot;PHP 7.0&quot;">​</a></h1><p>PHP 7.0 给开发者带来很多新特性，它们包括：</p><h2 id="标量类型声明" tabindex="-1">标量类型声明 <a class="header-anchor" href="#标量类型声明" aria-label="Permalink to &quot;标量类型声明&quot;">​</a></h2><p>可以使用字符串 <code>string</code>, 整数 <code>int</code>, 浮点数 <code>float</code>, 以及布尔值 <code>bool</code>，来声明函数的参数类型与函数返回值。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">declare</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">strict_types </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setAge</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">var_dump</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setIsValid</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">valid</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">var_dump</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">valid</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 默认会进行自动类型转换</span></span>
<span class="line"><span style="color:#82AAFF;">setAge</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">29</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// int(29)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// setAge(&#39;29&#39;); // 默认不定义\`strict_types = 1\` 会返回 int(29)；如果定义则会抛出错误</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 如果不能进行类型转换则会抛出错误</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// setAge(&#39;abs&#39;); // 抛出错误</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// setIsValid(&#39;abs&#39;); // 默认不定义\`strict_types = 1\` 会返回 bool(true)；如果定义则会抛出错误</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// setIsValid([]); // 抛出错误</span></span></code></pre></div><blockquote><p>标量类型声明 有两种模式: 强制 (默认) 和 严格模式。 declare(strict_types=1),必须放在文件的第一行执行代码，当前文件有效！</p></blockquote><h2 id="返回值类型声明" tabindex="-1">返回值类型声明 <a class="header-anchor" href="#返回值类型声明" aria-label="Permalink to &quot;返回值类型声明&quot;">​</a></h2><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getUser</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">User</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">User</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">var_dump</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">getUser</span><span style="color:#89DDFF;">());</span></span></code></pre></div><blockquote><p>如果定义了返回值类型，则不允许返回其他数据类型</p></blockquote><h2 id="null-合并运算符" tabindex="-1"><code>null</code> 合并运算符 <a class="header-anchor" href="#null-合并运算符" aria-label="Permalink to &quot;\`null\` 合并运算符&quot;">​</a></h2><p>在实际开发中存在大量同时使用三元表达式和 <code>isset()</code> 判定变量是否存在的情况， PHP 7.0 添加了 <code>null</code> 合并运算符 (<code>??</code>) 这个语法糖。</p><p>如果变量存在且值不为<code>null</code>，它就会返回自身的值，否则返回它的第二个操作数。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 从全局变量中获取user的值，如果存在则使用，否则返回 nobody，类似于：isset($_GET[&#39;user&#39;]) ? $_GET[&#39;user&#39;] : &#39;nobody&#39;;</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">_GET</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">??</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">nobody</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 先计算 $_GET[&#39;user&#39;] 是否存在，再计算 $_POST[&#39;user&#39;] 是否存在，最后如果都不存在则返回 nobody</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">_GET</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">??</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">_POST</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">??</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">nobody</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="操作符-组合比较符" tabindex="-1"><code>&lt;=&gt;</code>操作符（组合比较符） <a class="header-anchor" href="#操作符-组合比较符" aria-label="Permalink to &quot;\`&lt;=&gt;\`操作符（组合比较符）&quot;">​</a></h2><p>太空船操作符用于比较两个表达式。当 <code>$a</code> 小于、等于或大于 <code>$b</code> 时它分别返回 <code>-1</code>、<code>0</code>或<code>1</code>。</p><p><strong>语法</strong>：<code>$c = $a &lt;=&gt; $b</code></p><ul><li><p>当 <code>$a &gt; $b</code>, 则 <code>$c</code> 的值为 <code>1</code></p></li><li><p>当 <code>$a == $b</code>, 则 <code>$c</code> 的值为 <code>0</code></p></li><li><p>当 <code>$a &lt; $b</code>, 则 <code>$c</code> 的值为 <code>-1</code></p></li></ul><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 整数</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// -1</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 浮点数</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// -1</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 字符串</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// -1</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span></code></pre></div><h2 id="通过-define-定义常量数组" tabindex="-1">通过 <code>define()</code> 定义常量数组 <a class="header-anchor" href="#通过-define-定义常量数组" aria-label="Permalink to &quot;通过 \`define()\` 定义常量数组&quot;">​</a></h2><p>Array 类型的常量在 PHP 7.0 可以通过 <code>define()</code> 来定义。在 <code>PHP 5.6</code> 中仅能通过 <code>const</code> 定义。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#82AAFF;">define</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ANIMALS</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dog</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cat</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bird</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> ANIMALS</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">];</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 输出 &quot;cat&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">?&gt;</span></span></code></pre></div><h2 id="匿名类" tabindex="-1">匿名类 <a class="header-anchor" href="#匿名类" aria-label="Permalink to &quot;匿名类&quot;">​</a></h2><p>支持通过 <code>new class</code> 来实例化一个<a href="https://www.php.net/manual/zh/language.oop5.anonymous.php" target="_blank" rel="noreferrer">匿名类</a>，这可以用来替代一些“用后即焚”的完整类定义。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Logger</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">log</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Application</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">logger</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getLogger</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Logger</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#A6ACCD;">logger</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setLogger</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Logger</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">logger</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#A6ACCD;">logger </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">logger</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Application</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">setLogger</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Logger</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">log</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">var_dump</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">getLogger</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">代码运行会输出：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">object(class@anonymous)#2 (0) {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">?&gt;</span></span></code></pre></div><h2 id="unicode-codepoint-转译语法" tabindex="-1">Unicode codepoint 转译语法 <a class="header-anchor" href="#unicode-codepoint-转译语法" aria-label="Permalink to &quot;Unicode codepoint 转译语法&quot;">​</a></h2><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\u{aa}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\u{0000aa}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\u{9999}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">ª</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">ª (same as before but with optional leading 0&#39;s)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">香</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span></code></pre></div><h2 id="closure-call" tabindex="-1"><code>Closure::call()</code> <a class="header-anchor" href="#closure-call" aria-label="Permalink to &quot;\`Closure::call()\`&quot;">​</a></h2><p><code>Closure::call()</code> 现在有着更好的性能，简短干练的暂时绑定一个方法到对象闭包并调用它。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// PHP 7 之前版本的代码</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">getXCB </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">;};</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">getX </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">getXCB</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">bindTo</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">A</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 中间层闭包</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">getX</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// PHP 7+ 及更高版本的代码</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">getX </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">;};</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">getX</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">call</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h2 id="为-unserialize-提供过滤" tabindex="-1">为 <code>unserialize()</code> 提供过滤 <a class="header-anchor" href="#为-unserialize-提供过滤" aria-label="Permalink to &quot;为 \`unserialize()\` 提供过滤&quot;">​</a></h2><p>这个特性旨在提供更安全的方式解包不可靠的数据。它通过白名单的方式来防止潜在的代码注入。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 将所有的对象都转换为 __PHP_Incomplete_Class 对象</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">unserialize</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">allowed_classes</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将除 MyClass 和 MyClass2 之外的所有对象都转换为 __PHP_Incomplete_Class 对象</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">unserialize</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">allowed_classes</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyClass</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyClass2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 默认情况下所有的类都是可接受的，等同于省略第二个参数</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">unserialize</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">allowed_classes</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true]);</span></span></code></pre></div><h2 id="intlchar" tabindex="-1">IntlChar <a class="header-anchor" href="#intlchar" aria-label="Permalink to &quot;IntlChar&quot;">​</a></h2><p>新增加的 IntlChar 类旨在暴露出更多的 ICU 功能。</p><p>这个类自身定义了许多静态方法用于操作多字符集的 <code>unicode</code> 字符。</p><p>若要使用此类，请先安装 <a href="https://www.php.net/manual/zh/book.intl.php" target="_blank" rel="noreferrer">Intl扩展</a>。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">%x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IntlChar</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">CODEPOINT_MAX</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IntlChar</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">charName</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">var_dump</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IntlChar</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">ispunct</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">以上例程会输出：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">10ffff</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">COMMERCIAL AT</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">bool(true)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span></code></pre></div><h2 id="预期" tabindex="-1">预期 <a class="header-anchor" href="#预期" aria-label="Permalink to &quot;预期&quot;">​</a></h2><p>预期是向后兼用并增强之前的 <code>assert()</code> 的方法。 它使得在生产环境中启用断言为零成本，并且提供当断言失败时抛出特定异常的能力。</p><p>老版本的API出于兼容目的将继续被维护，<code>assert()</code> 现在是一个语言结构，它允许第一个参数是一个表达式，而不仅仅是一个待计算的 <code>string</code> 或一个待测试的 <code>boolean</code>。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#82AAFF;">ini_set</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">assert.exception</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CustomError</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AssertionError</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(false,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CustomError</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Some error message</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Fatal error: Uncaught CustomError: Some error message</span></span>
<span class="line"><span style="color:#89DDFF;">?&gt;</span></span></code></pre></div><p>关于这个特性的完整说明，包括如何在开发和生产环境中配置它，可以在 <a href="https://www.php.net/manual/zh/function.assert.php" target="_blank" rel="noreferrer">assert()</a> 的 <a href="https://www.php.net/manual/zh/function.assert.php#function.assert.expectations" target="_blank" rel="noreferrer">expectations section</a> 章节找到。</p><h2 id="命名空间引用优化" tabindex="-1">命名空间引用优化 <a class="header-anchor" href="#命名空间引用优化" aria-label="Permalink to &quot;命名空间引用优化&quot;">​</a></h2><p>从同一命名空间导入的类、函数和常量现在可以通过单个 use 语句一次性导入。</p><p>在之前的php版本语法的写法是：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// PHP 7 之前的代码</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">some</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">namespace</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">ClassA</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">some</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">namespace</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">ClassB</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">some</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">namespace</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">ClassC</span><span style="color:#FFCB6B;"> </span><span style="color:#F78C6C;">as</span><span style="color:#FFCB6B;"> C</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#C792EA;">function</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">some</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">namespace</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">fn_a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#C792EA;">function</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">some</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">namespace</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">fn_b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#C792EA;">function</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">some</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">namespace</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">fn_c</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#C792EA;">const</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">some</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">namespace</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">ConstA</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#C792EA;">const</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">some</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">namespace</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">ConstB</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#C792EA;">const</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">some</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">namespace</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">ConstC</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// PHP 7+ 及更高版本的代码</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">some</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">namespace</span><span style="color:#89DDFF;">\\{</span><span style="color:#A6ACCD;">ClassA</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">ClassB</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">ClassC</span><span style="color:#FFCB6B;"> </span><span style="color:#F78C6C;">as</span><span style="color:#FFCB6B;"> C</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#C792EA;">function</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">some</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">namespace</span><span style="color:#89DDFF;">\\{</span><span style="color:#A6ACCD;">fn_a</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">fn_b</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">fn_c</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#C792EA;">const</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">some</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">namespace</span><span style="color:#89DDFF;">\\{</span><span style="color:#A6ACCD;">ConstA</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">ConstB</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">ConstC</span><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="生成器可以返回表达式" tabindex="-1">生成器可以返回表达式 <a class="header-anchor" href="#生成器可以返回表达式" aria-label="Permalink to &quot;生成器可以返回表达式&quot;">​</a></h2><p>此特性基于 PHP 5.5 版本中引入的生成器特性构建的。</p><p>它允许在生成器函数中通过使用 <code>return</code> 语法来返回一个表达式 （但是不允许返回引用值）， 可以通过调用 <code>Generator::getReturn()</code> 方法来获取生成器的返回值， 但是这个方法只能在生成器完成产生工作以后调用一次。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">gen </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">foreach</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">gen </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> PHP_EOL</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">gen</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">getReturn</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> PHP_EOL</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">输出：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">2</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">3</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span></code></pre></div><p>在生成器中能够返回最终的值是一个非常便利的特性， 因为它使得调用生成器的客户端代码可以直接得到生成器（或者其他协同计算）的返回值， 相对于之前版本中客户端代码必须先检查生成器是否产生了最终的值然后再进行响应处理来得方便多了。</p><h2 id="生成器委托" tabindex="-1">生成器委托 <a class="header-anchor" href="#生成器委托" aria-label="Permalink to &quot;生成器委托&quot;">​</a></h2><p>现在，只需在最外层生成其中使用 yield from， 就可以把一个生成器自动委派给其他的生成器， Traversable 对象或者 array。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">gen</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">yield from</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">gen2</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">gen2</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">foreach</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">gen</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> PHP_EOL</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">2</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">3</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">4</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span></code></pre></div><h2 id="整数除法函数-intdiv" tabindex="-1">整数除法函数 <code>intdiv()</code> <a class="header-anchor" href="#整数除法函数-intdiv" aria-label="Permalink to &quot;整数除法函数 \`intdiv()\`&quot;">​</a></h2><p>新加的函数 <code>intdiv()</code> 用来进行 整数的除法运算。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">var_dump</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">intdiv</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// int(3)</span></span></code></pre></div><h2 id="会话选项" tabindex="-1">会话选项 <a class="header-anchor" href="#会话选项" aria-label="Permalink to &quot;会话选项&quot;">​</a></h2><p><code>session_start()</code> 可以接受一个 <code>array</code> 作为参数， 用来覆盖 <code>php.ini</code> 文件中设置的会话配置选项。</p><p>在调用 <code>session_start()</code> 的时候， 传入的选项参数中也支持 <code>session.lazy_write</code> 行为， 默认情况下这个配置项是打开的。</p><p>它的作用是控制 PHP 只有在会话中的数据发生变化的时候才写入会话存储文件，如果会话中的数据没有发生改变，那么 PHP 会在读取完会话数据之后， 立即关闭会话存储文件，不做任何修改，可以通过设置 <code>read_and_close</code> 来实现。</p><p>例如，下列代码设置 <a href="https://www.php.net/manual/zh/session.configuration.php#ini.session.cache-limiter" target="_blank" rel="noreferrer"><code>session.cache_limiter</code></a> 为 <code>private</code>，并且在读取完毕会话数据之后马上关闭会话存储文件。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#82AAFF;">session_start</span><span style="color:#89DDFF;">([</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cache_limiter</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">private</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">read_and_close</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#89DDFF;">]);</span></span></code></pre></div><h2 id="preg-replace-callback-array" tabindex="-1"><code>preg_replace_callback_array()</code> <a class="header-anchor" href="#preg-replace-callback-array" aria-label="Permalink to &quot;\`preg_replace_callback_array()\`&quot;">​</a></h2><p>在 PHP 7 之前，当使用 <code>preg_replace_callback()</code> 函数的时候，由于针对每个正则表达式都要执行回调函数，可能导致过多的分支代码。</p><p>而使用新加的 <code>preg_replace_callback_array()</code> 函数，可以使得代码更加简洁。</p><p>现在，可以使用一个关联数组来对每个正则表达式注册回调函数，正则表达式本身作为关联数组的键，而对应的回调函数就是关联数组的值。</p><h2 id="csprng-函数" tabindex="-1"><a href="https://www.php.net/manual/zh/book.csprng.php" target="_blank" rel="noreferrer">CSPRNG 函数</a> <a class="header-anchor" href="#csprng-函数" aria-label="Permalink to &quot;[CSPRNG 函数](https://www.php.net/manual/zh/book.csprng.php)&quot;">​</a></h2><p>新加入两个跨平台的函数：<a href="https://www.php.net/manual/zh/function.random-bytes.php" target="_blank" rel="noreferrer">random_bytes()</a> 和 <a href="https://www.php.net/manual/zh/function.random-int.php" target="_blank" rel="noreferrer">random_int()</a> 用来产生高安全级别的随机字符串和随机整数。</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">bytes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">random_bytes</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bin2hex</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 17f0e357144a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">random_int</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">999</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 623</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">random_int</span><span style="color:#89DDFF;">(-</span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// -460</span></span></code></pre></div><h2 id="list-函数展开-arrayaccess-接口的对象" tabindex="-1"><code>list()</code> 函数展开 ArrayAccess 接口的对象 <a class="header-anchor" href="#list-函数展开-arrayaccess-接口的对象" aria-label="Permalink to &quot;\`list()\` 函数展开 ArrayAccess 接口的对象&quot;">​</a></h2><p>在之前版本中，<code>list()</code> 函数不能保证正确的展开实现了 <code>ArrayAccess</code> 接口的对象，现在这个问题已经被修复。</p><h2 id="其他特性" tabindex="-1">其他特性 <a class="header-anchor" href="#其他特性" aria-label="Permalink to &quot;其他特性&quot;">​</a></h2><p>允许在克隆表达式上访问对象成员，例如：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#82AAFF;">bar</span><span style="color:#89DDFF;">()</span></span></code></pre></div><p>允许使用字符串的变量类名调用</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">foo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">bar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">baz</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hello</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">::$</span><span style="color:#A6ACCD;">bar</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// baz</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">hello</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// world</span></span></code></pre></div>`,77),e=[o];function t(c,r,y,D,F,C){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{i as __pageData,d as default};
