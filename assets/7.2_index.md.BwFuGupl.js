import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.CDQTxyhe.js";const c=JSON.parse('{"title":"PHP 7.2","description":"","frontmatter":{"sidebarDepth":3,"sidebar":"auto"},"headers":[],"relativePath":"7.2/index.md","filePath":"7.2/index.md","lastUpdated":1750832117000}'),l={name:"7.2/index.md"};function p(h,s,e,k,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="php-7-2" tabindex="-1">PHP 7.2 <a class="header-anchor" href="#php-7-2" aria-label="Permalink to &quot;PHP 7.2&quot;">​</a></h1><div class="danger custom-block"><p class="custom-block-title">重要提示</p><p>安全修复结束时间为：2020 年 11 月 30 日。如果正在使用当前版本，强烈建议升级到<a href="https://www.php.net/supported-versions" target="_blank" rel="noreferrer">当前版本</a>。</p></div><h2 id="新的对象类型" tabindex="-1">新的对象类型 <a class="header-anchor" href="#新的对象类型" aria-label="Permalink to &quot;新的对象类型&quot;">​</a></h2><p>新的对象类型, object, 引进了可用于逆变（contravariant）参数输入和协变（covariant）返回任何对象类型。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $obj) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SplQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> StdClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">SplQueue Object</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">(</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    [flags:SplDoublyLinkedList:private] =&gt; 4</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    [dllist:SplDoublyLinkedList:private] =&gt; Array</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">        (</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre></div><h2 id="通过名称加载扩展" tabindex="-1">通过名称加载扩展 <a class="header-anchor" href="#通过名称加载扩展" aria-label="Permalink to &quot;通过名称加载扩展&quot;">​</a></h2><p>扩展文件不再需要通过文件加载 (Unix 下以 <code>.so</code> 为文件扩展名，在 Windows 下以 <code>.dll</code> 为文件扩展名) 进行指定。</p><p>可以在 <code>php.ini</code> 配置文件进行启用, 也可以使用 <a href="https://www.php.net/manual/zh/function.dl.php" target="_blank" rel="noreferrer">dl()</a> 函数进行启用。</p><h2 id="使用argon2算法生成密码散列" tabindex="-1">使用Argon2算法生成密码散列 <a class="header-anchor" href="#使用argon2算法生成密码散列" aria-label="Permalink to &quot;使用Argon2算法生成密码散列&quot;">​</a></h2><p>Argon2 已经被加入到密码散列（password hashing） API (这些函数以 password_ 开头), 以下是暴露出来的常量:</p><ul><li><strong>PASSWORD_ARGON2I</strong></li><li><strong>PASSWORD_ARGON2_DEFAULT_MEMORY_COST</strong></li><li><strong>PASSWORD_ARGON2_DEFAULT_TIME_COST</strong></li><li><strong>PASSWORD_ARGON2_DEFAULT_THREADS</strong></li></ul><h2 id="新增-ext-pdo-pdo扩展-字符串扩展类型" tabindex="-1">新增 ext/PDO（PDO扩展） 字符串扩展类型 <a class="header-anchor" href="#新增-ext-pdo-pdo扩展-字符串扩展类型" aria-label="Permalink to &quot;新增 ext/PDO（PDO扩展） 字符串扩展类型&quot;">​</a></h2><p>PDO的字符串类型已经扩展支持国际化的字符集。以下是扩展的常量：</p><ul><li><strong>PDO::PARAM_STR_NATL</strong></li><li><strong>PDO::PARAM_STR_CHAR</strong></li><li><strong>PDO::ATTR_DEFAULT_STR_PARAM</strong></li></ul><p>这些常量通过 <strong>PDO::PARAM_STR</strong> 利用位运算OR进行计算：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$db</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">quote</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;über&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PDO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PARAM_STR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PDO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PARAM_STR_NATL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="ext-sockets-sockets扩展-添加了地址信息" tabindex="-1">ext/sockets（sockets扩展）添加了地址信息 <a class="header-anchor" href="#ext-sockets-sockets扩展-添加了地址信息" aria-label="Permalink to &quot;ext/sockets（sockets扩展）添加了地址信息&quot;">​</a></h2><p>sockets扩展现在具有查找地址信息的能力，且可以连接到这个地址，或者进行绑定和解析。为此添加了以下一些函数:</p><ul><li><strong>socket_addrinfo_lookup()</strong></li><li><strong>socket_addrinfo_connect()</strong></li><li><strong>socket_addrinfo_bind()</strong></li><li><strong>socket_addrinfo_explain()</strong></li></ul><h2 id="扩展了参数类型" tabindex="-1">扩展了参数类型 <a class="header-anchor" href="#扩展了参数类型" aria-label="Permalink to &quot;扩展了参数类型&quot;">​</a></h2><p>重写方法和接口实现的参数类型现在可以省略。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $input);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($input){} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// $input 变量的类型忽略，允许传入任意类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="允许分组命名空间的尾部逗号" tabindex="-1">允许分组命名空间的尾部逗号 <a class="header-anchor" href="#允许分组命名空间的尾部逗号" aria-label="Permalink to &quot;允许分组命名空间的尾部逗号&quot;">​</a></h2><p>命名空间可以在PHP 7中使用尾随逗号进行分组引入。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Foo\\Bar\\</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div>`,25)]))}const g=i(l,[["render",p]]);export{c as __pageData,g as default};
